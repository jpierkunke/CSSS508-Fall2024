[
  {
    "objectID": "Lectures/quarto_anatomy.html",
    "href": "Lectures/quarto_anatomy.html",
    "title": "ggplot2 demo",
    "section": "",
    "text": "Figure 1 further explores the impact of temperature on ozone level.\n\n\nCode\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n\n\nFigure 1: Temperature and ozone level."
  },
  {
    "objectID": "Lectures/quarto_anatomy.html#air-quality",
    "href": "Lectures/quarto_anatomy.html#air-quality",
    "title": "ggplot2 demo",
    "section": "",
    "text": "Figure 1 further explores the impact of temperature on ozone level.\n\n\nCode\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n\n\nFigure 1: Temperature and ozone level."
  },
  {
    "objectID": "Lectures/lec1_intro.html",
    "href": "Lectures/lec1_intro.html",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "",
    "text": "Let’s introduce ourselves!\n\nName, pronouns\nProgram, year\nAny experience with programming or R? (None required!)\nHow do you feel about the course or what are your goals in taking this class?\nWhat is one thing you like about fall?",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#incomplete-code",
    "href": "Lectures/lec1_intro.html#incomplete-code",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Incomplete code",
    "text": "Incomplete code\nThe console is ready to receive your code when it shows the little carrot command prompt &gt;. If you mess up (e.g. leave off a parenthesis), R might instead show a + sign prompting you to finish the command:\n\n3*(11-2\n+\n\nIf this happens, finish the command or hit Esc to get out of this.",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#arithmetic-in-r",
    "href": "Lectures/lec1_intro.html#arithmetic-in-r",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Arithmetic in R",
    "text": "Arithmetic in R\nWe can do basic mathematical computations using +, -, * (multiplication), / (division), and () (grouping). Try the following lines, one line at a time. I recommend typing them yourselves instead of copying and pasting.\n\n2+3\n6*7/2\n# The number pi is hard coded into R\npi*1\n# Why should the following two lines give you different results? What is the order of operations in each one?\n6*3/2-3\n6*3/(2-3) # create this line by using the up arrow to copy the previous command and edit it\n2^(3+2)\n# What will dividing by zero give you?\n1/0\n0/0\n\nA few notes:\n\nThere are some special values in R, like NaN and Inf.\nOperations follow the usual order of operations (PEMDAS).\nNotice that the lines starting with the hashtag or pound key # are ignored by R: they appear in the Console but R knows this is not code but something for the human to read. We call these comments and we’ll cover this more later. Other languages have different comment characters that function like # does in R.",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#functions",
    "href": "Lectures/lec1_intro.html#functions",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Functions",
    "text": "Functions\nsqrt() is an example of a function in R. Arguments are the inputs to a function. In this case, the only argument to sqrt() is x which can be a number or a vector of numbers.\nThe basic template of a function is\nfunction_name(argument1, argument2 = value2, argument3 = value3...)\n\n\n\n\n\n\nNote\n\n\n\nFunctions can have a wide range of arguments and some are required for the function to run, while others remain optional. You can see from each functions’ help page which are not required because they will have an = with some default value pre-selected. If there is no = it is up to the user to define that value and it’s therefore a required specification.\nR is case-sensitive, so if the function is called sqrt, then typing SQRT(100) and Sqrt(100) will give you an error or use some other function if there’s one defined under that name!\n\n\nLet’s try out some other functions:\n\nsqrt(9)\nlog(exp(1)^2)\nlog(1000)\nexp(2)\nsin(2*pi)\n\nNote that log() computes the natural logarithm (base \\(e\\)) by default. See ?log to compute a logarithm with a different base; how would you compute \\(\\log_{10}(1000)\\) and what should the correct answer be? Verify it by running your command into the R console.\nIf you know the name of a function and want to learn more about how to use it, you can access the help documentation by typing ?sqrt in the Console and look at the Help panel on the bottom right.\n\n?sqrt\n\nHelp files provide documentation on how to use functions and what functions produce. They generally consist of the following sections:\n\nDescription - What does it do?\nUsage - How do you write it?\nArguments - What arguments does it take, which are required, and what are the defaults?\nDetails - A more in-depth description\nValue - What does the function return?\nSee Also - Related R functions\nExamples - Example (& reproducible) code\n\nIf you’re trying to look up the help page for a function and can’t remember its name, you can search by a keyword and you will get a list of help pages containing said keyword.\n\n??exponential\n\nYou can also Google “r” and a description of what you’re trying to do.",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#calling-objects",
    "href": "Lectures/lec1_intro.html#calling-objects",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Calling Objects",
    "text": "Calling Objects\nYou can display or “call” an object simply by using its name.\n\nheight\n\n[1] 65",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#naming-objects",
    "href": "Lectures/lec1_intro.html#naming-objects",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Naming Objects",
    "text": "Naming Objects\nObject names are case-sensitive and should be meaningful.\nObject names must begin with a letter and can contain letters, numbers, ., and _.\nTry to be consistent in naming objects. RStudio auto-complete means descriptive names are better than short, vague ones! Good names save confusion later!\n\nsnake_case, where you separate lowercase words with _ is a common and practical naming convention that I strongly recommend.\n\n\nsnake_case_is_easy_to_read\nCamelCaseIsAlsoAnOptionButSortOfHardToReadQuickly\nsome.people.use.periods # not recommended because of how R sometimes uses periods",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#using-objects",
    "href": "Lectures/lec1_intro.html#using-objects",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Using Objects",
    "text": "Using Objects\nAn object’s name represents the information stored in that object, so you can treat the object’s name as if it were the values stored inside. Just like math variables, the name is a placeholder for what is stored in it.\n\nheight + 10\n\n[1] 75\n\nheight + height\n\n[1] 130\n\nsqrt(height)\n\n[1] 8.062258",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#object-types",
    "href": "Lectures/lec1_intro.html#object-types",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Object types",
    "text": "Object types\nA vector is one of many data types available in R. Specifically, it is a series of elements, such as numbers, strings, or booleans (i.e. TRUE, FALSE).\nYou can create a vector using the function c() which stands for “combine” or “concatenate”.\n\nheight &lt;- c(60, 65, 52, 71)\nheight\n\n[1] 60 65 52 71\n\n\nIf you name an object the same name as an existing object, it will overwrite it.\nYou can provide a vector as an argument for many functions as we saw before:\n\nsqrt(height)\n\n[1] 7.745967 8.062258 7.211103 8.426150\n\n\nThere are other, more complex data types in R which we will discuss later in the quarter! These include matrices, arrays, lists, and dataframes.\nMost data sets you will work with will be read into R and stored as a dataframe, so this course will mainly focus on manipulating and visualizing these objects.",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#exploring-a-dataset",
    "href": "Lectures/lec1_intro.html#exploring-a-dataset",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Exploring a dataset",
    "text": "Exploring a dataset\nWe can load the built-in data swiss, which loads as a dataframe, a type of object mentioned earlier. Then, we can look at it in a couple different ways.\ndata(swiss) loads this dataframe into the Global Environment.\nView(swiss) pops up a Viewer tab in the source pane (“interactive” use only, don’t put in Quarto document!).\nsummary() displays summary information. Note that R is object-oriented, and the one function summary() provides different information for different types of objects.\n\ndata(swiss) # loads the data set; where does it appear?\nView(swiss)\nstr(swiss)  # tells you about the STRucture of the data set\nhead(swiss) # what does this do?\nsummary(swiss) # what does this tell you?\n?swiss      # brings up a help/description page to tell you more about the data set; often has citations\ndata()        # this tells you about all the data sets available in your current environment\n\n\n\n\n\n\n\nYour Turn\n\n\n\nTry the above commands, see what they do, and try to answer the following questions about the data:\n\nWhere is the data from?\nHow many variables are in this data set, and what are they?\nHow many rows are in this data set, and what do they represent? Do you have a row for every respondent to a survey? Every state of the US?\nWhat format is each variable in?\nHow do you take a look at the first few rows? Last few rows?\nWhat questions do you still have about the data?",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#basic-plots-in-base-r",
    "href": "Lectures/lec1_intro.html#basic-plots-in-base-r",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Basic plots in base R",
    "text": "Basic plots in base R\nhist() generates a histogram of a vector. Note that you can access a vector that is a column of a dataframe using $, the extract operator.\n\nhist(swiss$Education) # Histogram\n\n\n\n\n\n\n\n\nWe can try and make this histogram more informative and appealing by specifying more arguments:\n\nhist(swiss$Education,\n  breaks = 10, # affects the number of bins\n  xlab = \"Percent of draftees with education beyond primary school\", # x-axis label\n  main = \"Histogram of education level\") # Title\n\n\n\n\n\n\n\n\nWe can experiment with colors and shapes.\nWe can make scatterplots to show the relationship between two variables.\n\nplot(Education ~ Agriculture,\n  data = swiss,\n  xlab = \"Percent of males involved in agriculture as occupation\",\n  ylab = \"Percent draftees with education beyond primary school\",\n  main = \"Agriculture and education\",\n  pch = 16) # Point shape\nabline(h = mean(cars$dist), col = \"firebrick\") # add horizontal line (y-value)\nabline(v = mean(cars$speed), col = \"cornflowerblue\") # add vertical line (x-value)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nEducation ~ Agriculture is a formula of the type y ~ x. The first element (Education) gets plotted on the y-axis and the second (Agriculture) goes on the x-axis. Regression formulae follow this convention as well!\n\n\nWe can check out pairs(), a pairwise scatterplot function. This function is good for a quick look at small datasets with numerical/continuous data.\n\npairs(swiss, \n      pch = 8, \n      col = \"violet\",\n      main = \"Pairwise comparisons of Swiss variables\")",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#creating-a-quarto-document",
    "href": "Lectures/lec1_intro.html#creating-a-quarto-document",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Creating a Quarto Document",
    "text": "Creating a Quarto Document\nLet’s try making an Quarto file:\n\nChoose File &gt; New File &gt; Quarto Document…\nMake sure HTML Output is selected\nIn the Title box call this test document My First Qmd and click Create\nSave this document somewhere (you can delete it later) (either with File &gt; Save or clicking     towards the top left of the source pane).\nLastly, click     Render at the top of the source pan to “knit” your document into an html file. This will produce a minimal webpage since we only have a title. We need to add more content!\n\nNote: Please don’t do this now, and you won’t need this for this course, but if you want to create PDF output in the future, you’ll need to run the following code in your console.\n\ninstall.packages(\"quarto\")\ninstall.packages('tinytex')\ntinytex::install_tinytex()",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#anatomy-of-a-quarto-document",
    "href": "Lectures/lec1_intro.html#anatomy-of-a-quarto-document",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Anatomy of a Quarto Document",
    "text": "Anatomy of a Quarto Document\nElements of a Quarto document:\n\nAn (optional) YAML header (surrounded by ---s).\nPlain text and any associated formatting.\nChunks of code (surrounded by ``` s) and/or their output.",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#r-code-in-a-quarto-document",
    "href": "Lectures/lec1_intro.html#r-code-in-a-quarto-document",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "R code in a Quarto document",
    "text": "R code in a Quarto document\nInside Quarto, lines of R code are called chunks. Code is sandwiched between sets of three backticks and {r}.\nIn quarto documents, you can click within a code chunk and click the green arrow     to run the chunk. The button beside that (   ) runs all prior chunks.\nYou can change whether the output shows up in the quarto document or in your console by clicking the gear symbol for Settings and selecting either “Chunk Output Inline” or “Chunk Output in Console”.\n\nCode chunk options\nChunks have options that control what happens with their code. They are specified as special comments at the top of a block. For example:\n```{{r}}\n#| label: bar-chart\n#| eval: false\n#| fig-cap: \"A line plot on a polar axis\"\n```\nSome useful and common options include:\n\necho: false - Keeps R code from being shown in the document\neval: false - Shows R code in the document without running it\ninclude: false - Hides all output but still runs code (good for setup chunks where you load packages!)\noutput: false - Doesn’t include the results of that code chunk in the output\ncache: true - Saves results of running that chunk so if it takes a while, you won’t have to re-run it each time you re-render the document\nfig.height: 5, fig.width: 5 - modify the dimensions of any plots that are generated in the chunk (units are in inches)\nfig.cap: \"Text\" - add a caption to your figure in the chunk\n\nTry adding or changing the chunk options for the chunk in my_first_Rmd.qmd and re-render your document to see what happens.\n\n```{r}\n#| eval: false\nsummary(cars)\n```\n\n\n\nIn-Line R code\nSometimes we want to insert a value directly into our text. We do that using code in single backticks starting off with r.\nFour score and seven years ago is the same as `r 4*20 + 7` years.\nFour score and seven years ago is the same as 87 years.\nMaybe we’ve saved a variable in a code chunk that we want to reference in the text:\n\nx &lt;- sqrt(77)\n\nThe value of `x` rounded to the nearest two decimals is `r round(x, 2)`.\nThe value of x rounded to the nearest two decimals is 8.77.\nHaving R dump values directly into your document protects you from silly mistakes:\n\nNever wonder “how did I come up with this quantity?” ever again: Just look at your formula in your .qmd file!\nConsistency! No “find/replace” mishaps; reference a variable in-line throughout your document without manually updating if the calculation changes (e.g. reporting sample sizes).\nYou are more likely to make a typo in a “hard-coded” number than you are to write R code that somehow runs but gives you the wrong thing.",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#quarto-headers",
    "href": "Lectures/lec1_intro.html#quarto-headers",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Quarto Headers",
    "text": "Quarto Headers\nThe header of a .qmd file is a YAML4code block, and everything else is part of the main document. Try adding some of these other fields to your YAML and re-render it to see what it looks like.\n\n---\ntitle: \"Untitled\"\nauthor: \"Victoria Sass\"\ndate: \"March 26, 2024\"\noutput: html_document\n---\n\nTo mess with global formatting, you can modify the header. Be careful though, YAML is space-sensitive; spaces and indents matter!\n\noutput:\n  html_document:\n    theme: readable\n\nIn your YAML header, make the date come from R’s Sys.time() function by changing:\ndate: \"March 26, 2024\"\nto\ndate: \"`r Sys.time()`\"",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#quarto-text-markdown",
    "href": "Lectures/lec1_intro.html#quarto-text-markdown",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Quarto text (“markdown”)",
    "text": "Quarto text (“markdown”)\nFor details on text formatting (e.g. bold), outlines/bullet points, nicely formatted math and more, see the Quarto documentation.\n\nGetting started with Quarto\n\nTutorial: Hello, Quarto\nTutorial: Computations\nTutorial: Authoring\n\nWays to modify the overall document appearance\nWays to format parts of your document\nLearn about the visual editor here",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#footnotes",
    "href": "Lectures/lec1_intro.html#footnotes",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nComment and organize your code well!↩︎\nThis thing is the cursor: |↩︎\nThis thing is the cursor: |↩︎\nYou can read a bit more about YAML headers in Quarto here and this reference page lists all options possible for html output.↩︎",
    "crumbs": [
      "Lectures",
      "Lecture 1"
    ]
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome! I look forward to working with you this quarter.\nThis syllabus is subject to change. All changes will be announced in class and via Canvas announcements.\n\nOverview\nThis course is intended to give students a foundational understanding of programming in the statistical language R. This knowledge is intended to be broadly useful wherever you encounter data in your education and career.\nThis course has no prerequisites; we do not assume you have any prior programming experience with R or any other language. We will also cover almost no statistics, but this course should help prepare you for CSSS, STAT, or other departments’ methods courses so that you can focus on the methods they cover more than the coding itself. Additionally, the basic concepts you learn will be applicable to other programming languages and research in general, such as logic and algorithmic thinking.\n\n\nLearning objectives\nBy the end of the course, students will be able to…\n\nDevelop more confidence in their programming skills and their understanding of computation more broadly\nBe familiar with the RStudio application and the syntax of the R language\nOrganize and document coding projects for reproducibility and efficient workflow\nRead in data from a file and explore the data\nManipulate and reformat data for quality control, summary statistics, and other purposes\nCombine multiple data sets from different sources and of different types\nCreate beautiful, clear, and informative data visualizations\nCombine text, code, and output into reports using Quarto\nGain confidence troubleshooting, debugging, and learning how to do new things in R\n\n\n\nStructure\nThis course consists of a hands-on lecture and drop-in office hours, each once a week for two hours.\nIn person or remote? This course is intended to be primarily in person, but I recognize that life happens, so I will plan to hold lectures and office hours in a hybrid fashion in case you need to join remotely sometimes. This way we can also post lecture recordings in case you want to review something from class.\n\nLectures\nFor a schedule of lecture topics, please see the Lectures page. Note that the course will not meet during final exam week.\nPlease bring a laptop to class each week; I will spend a lot of class “live coding”, meaning I will move at a pace and in a sequence that is intended for you to code along with me and ask questions as they come up. I will also have some practice problems for you to work on during class. If you do not have a laptop you can bring to class and are not sure how to borrow one, please let me know in advance.\n\n\nOffice hours\nOffice hours are optional/drop-in and are a great space for asking questions, getting advice, or continuing discussions from class.\n\n\n\nResources\nThis course has no required text. I will guide you through content during lecture, and the lecture notes will all be here on this website. There are also many helpful resources available for free online if you would like further references along the way or after this class ends, and here is just a selection that you might find useful:\n\nR for Data Science by Hadley Wickham, Mine Çetinkaya-Rundel, & Garrett Grolemund.\n\n\n\nClass communication\n\nCourse content (lecture notes) and homework instructions will be posted here on this course website.\nYou will be submitting your assignments and peer reviews through Canvas.\nCheck your Canvas notification settings and make sure you get our course announcements! This is how I will send out homework clarifications, schedule changes, and other important information.\nPlease use Ed Discussion to post your questions to peers and provide some advice to others! I will also keep an eye on the discussions and step in as needed, but the primary goal is to encourage collaboration and discussion among members of the class.\nPlease also make good use of my office hours to address your questions and get extra practice with the material.\nWhen asking questions, please provide the code you ran and the error you gave, be specific and concrete, and try to provide a minimal reproducible example. This helps me and your fellow students give you the most helpful feedback!\n\n\n\nAnonymous feedback\nThroughout the course, I welcome your feedback through this short anonymous feedback survey on what’s working for you about the class environment or format, what’s not, and any suggestions or ideas you have.\n\n\nGrading\nThis course is graded as credit/no credit. To pass you need to receive at least 60% of the available points. There will be 9 graded homework assignments, assigned weekly for the first 9 weeks of instruction. There are 4 points possible for each week that features a homework.\n\nHomework (75%; 3 points): These must be turned in as rendered Markdown documents which we will learn to create and for which templates are provided. They will be graded on a 0 to 3 point scale based on a simple effort-focused rubric. These are designed first and foremost to develop skills rather than “prove” you have learned concepts. I encourage you to communicate and work together, so long as you write and explain your code yourself and do not copy work. You can learn a lot from replicating others’ code, but you will learn nothing if you copy it without knowing how it works! In other words, you’re not really going to learn unless you do the coding yourself!\nPeer Review (25%; 1 point): Each week an assignment is due, students will be randomly assigned to grade another student’s assignment following a 0 to 3 rubric. They will be expected to provide constructive feedback and commentary if something new was learned. Reading others’ code is an important skill and you will write better code knowing others will see it. These reviews will be due 5 days after homework is due. Each peer review is worth 1 point and will be evaluated by the instructor on a binary satisfactory/not satisfactory scale.\nSchedule: We have a 2-hour interactive lecture/lab session on Tuesdays. Office Hours will be be held on Wednesdays. Homeworks will be due before class each Tuesday and peer reviews will be due 5 days later, by end-of-day on Sundays. Make sure to check the Homework page or Canvas for all due dates!\n\n\n\n\n\n\n\nLate Homework Will Automatically Lose Peer-Review Credit\n\n\n\nPeer reviews are autmatically randomly assigned through Canvas at the due date. Therefore, if you don’t submit your homework on time, you will not be given a peer’s homework to review and vice versa. Life is messy and complicated and we all miss deadlines for a variety of reasons. If that happens, you can email me to request that I review and provide feedback on a late assignment, but you won’t be able to earn peer-review credit for that particular homework.\n\n\n\n\nClassroom Environment\nI’m committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed. This course is an attempt to make an often difficult and frustrating experience (learning R for the first time) less obfuscating, daunting, and stressful. That said, learning happens in different ways at at a different pace for everyone. Learning is also a collaborative and creative process and my aim is to create an environment in which you all feel comfortable asking questions of me and each other. Treat your peers and yourself with empathy and respect as you all approach this topic from a range of backgrounds and experiences (in programming and in life).\n\nNames & Pronouns: Everyone deserves to be addressed respectfully and correctly. You are welcome to send me your preferred name and correct gender pronouns at any time.\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting after class, coming to office hours, or sending me an email.\nDiversity: Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of university education. Therefore, I expect you to follow the UW Student Conduct Code in your interactions with your colleagues and me in this course by respecting the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, family status, gender identity and presentation, body size/shape, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, socioeconomic status, and veteran status.\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website. DRS offers resources and coordinates reasonable accommodations for students with disabilities and/or temporary health conditions. Reasonable accommodations are established through an interactive process between you, me (your instructor), and DRS. It is the policy and practice of the University of Washington to create inclusive and accessible learning environments consistent with federal and state law.\nAcademic Integrity: Academic integrity is essential to this course and to your learning. In this course, violations of the academic integrity policy include but are not limited to: copying from a peer, copying from an online resource, or using resources from a previous iteration of the course. That said, I hope you will collaborate with peers on assignments, and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work. Anything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask.\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW’s policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form."
  },
  {
    "objectID": "Homework/CSSS508_HW1_Template.html",
    "href": "Homework/CSSS508_HW1_Template.html",
    "title": "Homework 1",
    "section": "",
    "text": "This basic R markdown file has some text, inline code, and code chunks!"
  },
  {
    "objectID": "Homework/CSSS508_HW1_Template.html#code-chunks",
    "href": "Homework/CSSS508_HW1_Template.html#code-chunks",
    "title": "Homework 1",
    "section": "Code Chunks",
    "text": "Code Chunks\n\nset.seed(1)\nnorm &lt;- rnorm(100)\nhist(x = norm, \n     xlab = \"X Axis Name\", \n     ylab = \"Count\", \n     main = \"Histogram of 100 observations from a Standard Normal\")\n\n\n\n\n\n\n\n\nUnless you include the chunk option #| echo: false, your code chunk will be displayed in your final document."
  },
  {
    "objectID": "Homework/CSSS508_HW1_Template.html#text-and-inline-text",
    "href": "Homework/CSSS508_HW1_Template.html#text-and-inline-text",
    "title": "Homework 1",
    "section": "Text and Inline Text",
    "text": "Text and Inline Text\nThe sample mean of the data plotted above (rounded to 3 decimal points) is 0.109 and the variance is 0.807.\nWhat’s the relationship between standard deviation and variance?\n\\[ \\text{Standard Deviation}(X) = \\sqrt{\\text{Variance}(X)} \\]\nThe standard deviation of the data plotted above is 0.898."
  },
  {
    "objectID": "Homework/homework1.html",
    "href": "Homework/homework1.html",
    "title": "Homework 1",
    "section": "",
    "text": "Instructions\nWrite up a .qmd file showing some exploratory analyses of the Swiss fertility data. Upload both the .qmd file and the .html file to Canvas. You must upload BOTH for credit.\nMix inline R calculations, R output, and plots with text describing the relationships you see. Include at least two plots and at least one instance of inline R code (e.g. functions like nrow(), mean(), sd(), cor(), median(), min()). You are encouraged to include more! You may not hard-code any numbers referenced in your text.\nYour document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Use chunk options echo and output to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text—not as printed code and output—and rounded so as not to be absurdly precise (e.g. round x with round(x, 2)).\n\n\nTemplate\nrendered html file • raw qmd file\n\n\nExample\nrendered html file • raw qmd file",
    "crumbs": [
      "Homework",
      "Homework 1"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSSS 508: Intro to R for Social Scientists",
    "section": "",
    "text": "Jess Kunke (she/they)\n\n\n\nTuesdays 4:30-6:20pm\nThomson Hall, Room 125\n\n\n\nFridays 2-4pm, hybrid (Zoom and physical location TBD)\nFor further course details, please see the syllabus.\nThank you Vic Sass for the fantastic website design!"
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "CSSS 508: Intro to R for Social Scientists",
    "section": "",
    "text": "Jess Kunke (she/they)\n\n\n\nTuesdays 4:30-6:20pm\nThomson Hall, Room 125\n\n\n\nFridays 2-4pm, hybrid (Zoom and physical location TBD)\nFor further course details, please see the syllabus.\nThank you Vic Sass for the fantastic website design!"
  },
  {
    "objectID": "Homework/homework.html",
    "href": "Homework/homework.html",
    "title": "Overview",
    "section": "",
    "text": "This page contains general instructions for assignments/peer reviews. For homework-specific instructions and templates go to the specific assignment listed on the left.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#a-note-about-rendering-your-html-documents",
    "href": "Homework/homework.html#a-note-about-rendering-your-html-documents",
    "title": "Overview",
    "section": "A Note About Rendering Your HTML documents",
    "text": "A Note About Rendering Your HTML documents\nYou need to include embed-resources: true in your YAML header in order for your HTML documents to include any plot output when you upload them to Canvas. It should look something like the following:\n\nYou can read more about this option here but basically, whenever you render a .qmd file to HTML, all output created goes into a separate, associated folder, which is referenced when displaying the page in your web browser. However, when you upload the HTML file separately from that folder (e.g. to Canvas or through email), it doesn’t have the specific output images to reference, so they won’t appear. When you specify in your YAML header that you want to embed resources, you’re explicitly adding the output created by your code to the HTML file so that a separate output folder is longer created and you can send your HTML file with all its output as one entity.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#assignment-due-dates",
    "href": "Homework/homework.html#assignment-due-dates",
    "title": "Overview",
    "section": "Assignment Due Dates",
    "text": "Assignment Due Dates\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n08 October\n13 October\n\n\n2\n15 October\n20 October\n\n\n3\n22 October\n27 October\n\n\n4\n29 October\n03 November\n\n\n5\n05 November\n10 November\n\n\n6\n12 November\n17 November\n\n\n7\n19 November\n24 November\n\n\n8\n26 November\n01 December\n\n\n9\n03 December\n08 December\n\n\n\n\n\n\n\n\nAll assignments should be created using Quarto and uploaded to Canvas as both html and qmd files. Your document should be pleasant for a peer to look at and follow all instructions. Use sections for organization, label figures/tables, and use code chunks.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#rubric-students-use-to-grade-assignments",
    "href": "Homework/homework.html#rubric-students-use-to-grade-assignments",
    "title": "Overview",
    "section": "Rubric Students Use to Grade Assignments",
    "text": "Rubric Students Use to Grade Assignments\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvaluation\nPoints\n\n\n\n\nDidn't turn anything in.\n0\n\n\nTurned in but low effort, ignoring many directions.\n1\n\n\nDecent effort, followed directions with some minor issues.\n2\n\n\nNailed it!\n3",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#peer-review",
    "href": "Homework/homework.html#peer-review",
    "title": "Overview",
    "section": "Peer Review",
    "text": "Peer Review\nYou are required to both grade and provide feedback on a peer’s homework each week. Reading/evaluating the work of others is useful and important! Good programmers realize that most problems have been solved by others; the trick is figuring out how to apply existing code to new problems. You will develop this skill by reading others’ code, evaluating their approach to problems, providing suggestions, and pointing out when you learned something new. Good peer reviews give constructive, polite, and insightful comments, are specific and concise, use the grading rubric above, and point out what you learned from their code. Poor peer reviews are impolite or unprofessional, are generic (i.e., could be applied to anyone’s homework), or fail to provide useful suggestions.\n\n\n\n\n\n\nLate Homework Will Automatically Lose Peer-Review Credit\n\n\n\nPeer reviews are autmatically randomly assigned through Canvas at the due date. Therefore, if you don’t submit your homework on time, you will not be given a peer’s homework to review and vice versa. Life is messy and complicated and we all miss deadlines for a variety of reasons. If that happens, you can email me to request that I review and provide feedback on a late assignment, but you won’t be able to earn peer-review credit for that particular homework.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#rubric-instructor-uses-to-grade-peer-review",
    "href": "Homework/homework.html#rubric-instructor-uses-to-grade-peer-review",
    "title": "Overview",
    "section": "Rubric Instructor Uses to Grade Peer Review",
    "text": "Rubric Instructor Uses to Grade Peer Review\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvaluation\nPoints\n\n\n\n\nDidn’t follow all peer-review instructions.\n0\n\n\nPeer review is at least several sentences long,  mentions any and all key issues from the assignment,  and points out at least one positive thing in your  peer’s work (and hopefully more!).\n1",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#when-to-contact-the-instructor",
    "href": "Homework/homework.html#when-to-contact-the-instructor",
    "title": "Overview",
    "section": "When to Contact the Instructor",
    "text": "When to Contact the Instructor\nA number of situations may warrant contacting the instructor:\n\nIf you believe you have received an unfair peer review, you can resubmit your homework for evaluation by the instructor. The assignment will be regraded, which may result in a higher, same, or lower grade.\nIf you wish for more feedback on a particular part of the homework, you can ask the instructor for additional explanation without resubmitting during office hours or over Slack.\nIf you receive no feedback, I will provide gentle peer review on request.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/CSSS508_HW1_Example.html",
    "href": "Homework/CSSS508_HW1_Example.html",
    "title": "CSSS508 Homework 1 Example",
    "section": "",
    "text": "I’m interested in exploring a dataset from base R called iris. From its documentation I see that it is data about 50 flowers from each of 3 species of iris and their respective measurements of sepal length, sepal width, petal length, and petal width.\nI first want to take a look at a preview of the dataset by making a nice table.\n\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n1\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n2\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n3\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n6..145\n\n\n\n\n\n\n\n146\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n147\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n148\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n149\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n150\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n\n\n\nThe mean petal length is 3.76 but its median petal length is 4.35. It’s range is 5.9 which additionally suggests a certain degree of spread.\nIt might be useful to look at the distribution to gain a better sense of the variation of this variable.\n\n\n\n\n\n\n\n\n\nThere seems to be a cluster of much smaller petals and then another cluster of average to bigger petals. I wonder how this varies by species…?\n\n\n\n\n\n\n\n\n\nWe can see from this plot that the overall mean and median of petal length is quite misleading! Only the verisicolor species of iris is close to those values while setosa is much mush smaller and virginica is a bit bigger.\nIs there a similar thing happening for sepal length and width? Let’s look at some basic descriptives of the dataset.\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\nMin. :4.300\nMin. :2.000\nMin. :1.000\nMin. :0.100\nsetosa :50\n\n\n1st Qu.:5.100\n1st Qu.:2.800\n1st Qu.:1.600\n1st Qu.:0.300\nversicolor:50\n\n\nMedian :5.800\nMedian :3.000\nMedian :4.350\nMedian :1.300\nvirginica :50\n\n\nMean :5.843\nMean :3.057\nMean :3.758\nMean :1.199\nNA\n\n\n3rd Qu.:6.400\n3rd Qu.:3.300\n3rd Qu.:5.100\n3rd Qu.:1.800\nNA\n\n\nMax. :7.900\nMax. :4.400\nMax. :6.900\nMax. :2.500\nNA\n\n\n\n\n\n\n\nIt’s interesting to note with the summary function that for numerical data it’ll calculate the classic 5 statistics used to construct a boxplot plus the mean but for a categorical variable like iris$Species it returns the frequency of each value of the variable.\nThe distribution of sepal length looks wider than sepal width, similar to how it was for those measurements of the petals. Let’s see how sepal length and width relate to one another graphically.\n\n\n\n\n\n\n\n\n\nThere are still clusters by each species type but for verisicolor and virginica there’s much more overlap. Overall, there’s tighter clustering by species for the petal length and width than there is for the sepal length and width."
  },
  {
    "objectID": "Lectures/lec2_data_manip.html",
    "href": "Lectures/lec2_data_manip.html",
    "title": "Day 2: Data manipulation and visualization",
    "section": "",
    "text": "Today we’ll be using a subset of the gapminder dataset including life expectancy at birth (in years), GDP per capita (in US dollars, inflation-adjusted), and population by country. You can load this into R directly from the gapminder package, but to practice reading data from a file, we will read it from the file “gapminder.csv”."
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#todays-dataset",
    "href": "Lectures/lec2_data_manip.html#todays-dataset",
    "title": "Day 2: Data manipulation and visualization",
    "section": "",
    "text": "Today we’ll be using a subset of the gapminder dataset including life expectancy at birth (in years), GDP per capita (in US dollars, inflation-adjusted), and population by country. You can load this into R directly from the gapminder package, but to practice reading data from a file, we will read it from the file “gapminder.csv”."
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#packages",
    "href": "Lectures/lec2_data_manip.html#packages",
    "title": "Day 2: Data manipulation and visualization",
    "section": "Packages",
    "text": "Packages\nWe will be using the tidyverse package today, which we installed yesterday. Which of the following commands will we need? Both? One? Neither? Why?\n\n# note: install.packages REQUIRES quotes around the package name\ninstall.packages(\"tidyverse\")\n# for library you can use quotes or not, doesn't matter\nlibrary(tidyverse)\n\n\n\n\n\n\n\nExpand this to check your answer…\n\n\n\n\n\nRemember that you pretty much only ever need to install a package with install.packages() once on a given device1, while you’ll need to load it using the library() function at the start of each R session that you want to use that package.\nToday we’ll be using the tidyverse package. If you haven’t installed tidyverse, you’ll need to first install it on your computer using the install.packages() function, then load it into your current R session using the library() function:\n\n# note: install.packages REQUIRES quotes around the package name\ninstall.packages(\"tidyverse\")\n# for library you can use quotes or not, doesn't matter\nlibrary(tidyverse)\n\nIf you have already installed tidyverse on your computer, then you just need the library() function:\n\nlibrary(tidyverse)\n\nIf you actually never closed your RStudio session from yesterday (which also means your computer must still be running), then you don’t even need to run the library() function."
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#reading-in-data-from-a-file",
    "href": "Lectures/lec2_data_manip.html#reading-in-data-from-a-file",
    "title": "Day 2: Data manipulation and visualization",
    "section": "Reading in data from a file",
    "text": "Reading in data from a file\nIn theory, you can just read the code in with one line:\n\ngapminder &lt;- read_csv(\"gapminder.csv\")\n\nDid that work for you? It may or may not. To know why, we need to talk a bit about how files are organized on your computer, and where R looks for things when you tell it to read in a file. This can be a bit painful and confusing at first, but once you know a bit about it, you can choose some systems that work for you.\nA file path is the path to a folder (directory) or file on your computer. File paths are specified in reference to a root directory or a home directory. So for example, on my computer, the file path “~/Documents/CSSS-math-camp-2024/gapminder.csv” means that in my home directory (signified by “~”), there should be a “Documents” folder, and in there should be a “CSSS-math-camp-2024” folder, and in there should be a file called “gapminder.csv”. This path may or may not exist; it’s an address, and a file may or may not actually live there, and one of those folders might not actually be in the folder it’s supposed to be in, etc.\nFile paths can be absolute or relative. An absolute file path is defined with reference to the root directory. For example, “/Users/jessicakunke/Documents/CSSS-math-camp-2024/gapminder.csv” is an absolute file path. On a Windows machine, the root directory is usually “C:\\”, and the slashes in the path are all backward slashes “\\” instead of forward slashes “/”. On Mac and Linux machines, the root directory is usually “/”.\n\n\n\n\n\n\nAn important note for Windows users\n\n\n\n\n\ntl;dr: use a double backslash instead of a single backslash throughout your Windows file paths.\nThe deets:\nUnfortunately, R and other languages use backslashes as an “escape character”. What does that mean? Consider how character values have to be surrounded by double quotes to indicate it’s a character value instead of a variable/object/function name. Then what do you do if your character string includes double quotes? You “escape” the quotes with a backslash:\n\n# these two lines won't work if you uncomment them\n# print(\"He said \"whooooaaa\"\")\n# cat(\"He said \"whooooaaa\"\")\n\n# but these work; note the different output of print and cat\nprint('He said \\\"whooooaaa\\\"')\ncat('He said \\\"whooooaaa\\\"')\n\nAs a result, if you want to include a backslash as a character, you need to escape it with another backslash:\n\n# these two lines won't work if you uncomment them\n#   specifically, they expect you to type more (they think the commands aren't \n#   complete) because the \\\" is interpreted as part of the character string and\n#   it's expecting another \" to end the character string\n# print(\"C:\\User\\Desktop\\\")\n# cat(\"C:\\User\\Desktop\\\")\n\n# but these work\nprint(\"C:\\\\User\\\\Desktop\\\\\")\ncat(\"C:\\\\User\\\\Desktop\\\\\")\n\n\n\n\nA relative file path is defined with reference to an arbitrary location. For example, “data/gapminder.csv” means, look in your current directory for a folder called “data”, and in there, look for a file called “gapminder.csv”.\nReading in the data with gapminder &lt;- read_csv(\"gapminder.csv\") will work if RStudio knows to look in the directory that contains our dataset. You can use the command getwd() (for “get working directory”) to see where RStudio is currently looking for your files. Any relative file paths you use are relative to this working directory. So when you say the file you want is “gapminder.csv”, you’re looking for that file in this directory.\nYou can organize your R projects using absolute paths, but this is not what I recommend if you are sharing your code or collaborating with others.\n\n\n\n\n\n\nExpand for tips on using absolute file paths\n\n\n\n\n\n\nCheck out setwd() and getwd()\nIn the RStudio Files pane, navigate to the data set you want, click the gear, select “Copy folder path to clipboard”, then paste that file path wherever you want the file path (e.g. inside read_csv()).\n\n\n\n\nA fairly painless and straightforward way to handle these file path challenges is to create an R Project. This R project will be associated with a folder where you put most or all of the code and data needed for the project. When you open the project in RStudio, it will tell RStudio to use that folder as “home base”. Then you specify all your file paths relative to that folder.\nLet’s try this approach. Create an R Project (File &gt; New Project) and select either New Directory or Existing Directory.\nOnce your new project opens, let’s see where the current working directory is (it should be the folder that you made the project in):\n\n# get working directory (getwd)\ngetwd()\n\nMake sure that gapminder.csv is in this directory, then try loading the file again as before:\n\ngapminder &lt;- read_csv(\"gapminder.csv\")\n\nTa-da!\nNotice this command is kind of noisy, printing out a bunch of stuff we don’t need. As the message says, we can make it “quieter” by setting another argument of the read_csv() function:\n\ngapminder &lt;- read_csv(\"gapminder.csv\", show_col_types = FALSE)\n\n\nCommenting your code\nMany languages have a comment character that allows you to “comment out” parts of your code so that R will not run them. In R, that comment character is the hashtag #.\nWhy would I ever want to do that?\n\nYou can (and should! please!) use this to write comments to yourself and others who read your code, to explain what you’re doing or why\n\nNotice that one of the code chunks above has a line like that: “get working directory (getwd)”\n\nYou can use this to temporarily not run certain lines, like if you’re troubleshooting code and you want to run the whole script start to finish but you want to skip some parts without deleting them\n\nLet’s test this out. What value does x have after this code chunk? Why?\n\nx = 9\nx = x + 2\nx = x - 5\n\nWhat about after this code chunk, which is the same except the middle line is commented out? Why?\nNote: to toggle back and forth between commented and uncommented, you can use the keyboard shortcuts shift-control-C or shift-command-C.\n\nx = 9\n# x = x + 2\nx = x - 5"
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#data-exploration",
    "href": "Lectures/lec2_data_manip.html#data-exploration",
    "title": "Day 2: Data manipulation and visualization",
    "section": "Data exploration",
    "text": "Data exploration\nWe already learned several things yesterday that we can use to explore this dataset. Let’s practice (and also learn some new things):\n\nHow many observations and variables are in this dataset?\nWhat range of years are represented in the dataset? At what intervals or what frequency (annual, biannual, …)?\nHow many countries and how many continents are in this dataset?\nHow many observations do we have on each continent?\n\n\nstr(gapminder)\nhead(gapminder)\ndim(gapminder)\nncol(gapminder)\nnames(gapminder)\n\n# what range of years?\nrange(gapminder$year)\n# how many unique years?\nn_distinct(gapminder$year)\n# what unique years?\nunique(gapminder$year)\n# what frequency?\ndiff(gapminder$year) # hmm... not what we want...\ndiff(unique(gapminder$year))\n\n# how many countries? continents?\nn_distinct(gapminder$country)\n# how many obs on each continent?\ntable(gapminder$continent)\n\nLet’s look at this dataset as a (sort-of) matrix for a moment:\n\n# how long is the country column? is it equal to the number of countries in the dataset?\nlength(gapminder$country)\n# actually it's the same as asking how many rows are in the dataset\nnrow(gapminder)\n\n# check out the first row\ngapminder[1,]\n\n# check out the first column\ngapminder[,1]\n\n# pick out the fourth row of the third column, two different ways\ngapminder[4,3]\ngapminder[4,\"year\"]\n\nLet’s figure something out together using what we learned yesterday about logicals and indexing: how many African countries are represented in this dataset? Which ones?\n\n\n\n\n\n\nYour Turn\n\n\n\n\nReplace the x and y placeholders to get the per-capita GDP for the 34th observation (your final code should not have any x or y):\n\n\ngapminder[x, y]\n\n\nHow many countries in Oceania are in this dataset? Which ones?\nHow many data points do we have for each country? Is it fairly balanced?"
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#data-manipulation",
    "href": "Lectures/lec2_data_manip.html#data-manipulation",
    "title": "Day 2: Data manipulation and visualization",
    "section": "Data manipulation",
    "text": "Data manipulation\nNow let’s see how to work with data using the tidyverse! We’ve actually already sneakily used two tidyverse functions– read_csv() and n_distinct()– but now we’ll really get into using tidyverse for manipulating data.\nBehind the tidyverse (and its name) is the idea of tidy data:\n\n\n\n\n\n\n\n\n\n\n\n(a) Tidy data\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Tidy vs. messy data\n\n\n\n\n\n\n\nFigure 1: Illustrations from the Openscapes blog “Tidy Data for reproducibility, efficiency, and collaboration” by Julia Lowndes and Allison Horst\n\n\n\n\n\n\nFiltering and selecting\nFiltering allows us to subset the dataset to just the rows that meet some condition:\n\nfilter(gapminder, continent == Oceania) # why doesn't this work? fix this line of code\nfilter(gapminder, continent == \"Oceania\" & year == 2007)\nfilter(gapminder, year&gt;1980 & year&lt;2000 & country == \"Eritrea\") \n\n# what's the difference between this and the previous line? and why doesn't this print anything?\neritrea = filter(gapminder, year&gt;1980 & year&lt;2000 & country == \"Eritrea\")\n\n# check out the documentation on filter to see its arguments\n?filter\n\nSelecting allows us to pick or look at just certain columns:\n\nselect(gapminder, pop)\nselect(gapminder, lifeExp:gdpPercap) # range of variables (columns)\nselect(gapminder, country, year) # specific variables/columns\n\nWe filter rows, and we select columns.\n\n\nAdding/changing columns (variables)\nLet’s add a column that indicates whether the data is from Afghanistan or not:\n\nmutate(gapminder, isAfghan = (country == \"Afghanistan\"))\n# how do we change the above line of code so that it stores the result somewhere?\n\nWe can also use mutate() to modify an existing column. For instance, we can make the year integer format:\n\ngap_int = mutate(gapminder, year = as.integer(year))\nstr(gap_int)\n\n\n\nCombining steps\nHere is some pseudocode to show the general flow for how we can combine steps. This means this pseudocode won’t run as is, but it gives us a general sense for how to put things together.\n\n# approach 1:\nnew_data = step1(gapminder)\nnew_data = step2(new_data)\nnew_data = step3(new_data)\n\n# approach 2:\nnew_data = step3(step2(step1(gapminder)))\n\nLet’s try this with a concrete example, with actual code we can run. For instance, let’s go back to a question we answered earlier without tidyverse: how many African countries are represented in this dataset, and which ones?\n\n# approach 1:\nnum_african_countries = filter(gapminder, continent == \"Africa\")\nnum_african_countries = select(num_african_countries, country)\nnum_african_countries = n_distinct(num_african_countries)\n\n# approach 2:\nnum_african_countries = n_distinct(select(filter(gapminder, continent == \"Africa\"), country))\n\n\n\n\n\n\n\nYour Turn\n\n\n\nWrite code that will do all of the following with the gapminder data:\n\nSubset the data to just the countries in Asia with at least 10 million people, then\nPick just the first four columns.\n\n\n\nWhat is annoying so far about combining these steps? In other words, what do you find annoying about Approaches 1 and 2?\n\n\nCombining steps with pipes\nPipes will make this better; they are a way of feeding one command into another. First let’s see how a pipe works with a single step. Use shift-control-M or shift-command-M to make the pipe symbol %&gt;%.\n\n# without pipe\nfilter(gapminder, continent == \"Oceania\")\n\n# with a pipe\ngapminder %&gt;% filter(continent == \"Oceania\")\n\nNow let’s see how this works with a sequence of commands by rewriting our example above about the number of African countries:\n\nnum_african_countries = gapminder %&gt;%\n  # subset to countries in Africa\n  filter(continent == \"Africa\") %&gt;%\n  # keep just the country column\n  select(country) %&gt;%\n  # count how many unique values there are\n  n_distinct()"
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#footnotes",
    "href": "Lectures/lec2_data_manip.html#footnotes",
    "title": "Day 2: Data manipulation and visualization",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou’ll also usually need to reinstall the packages you use with install.packages() if you update R.↩︎"
  },
  {
    "objectID": "Lectures/lectures.html",
    "href": "Lectures/lectures.html",
    "title": "Lecture schedule",
    "section": "",
    "text": "Please note that this schedule is subject to change.\n\n\n\nLecture\nDate\nTopic\n\n\n\n\n1\n01 Oct 2024\nIntroduction to R, R Studio, and Quarto\n\n\n2\n08 Oct 2024\nVisualizing Data\n\n\n3\n15 Oct 2024\nWorkflow and Reproducibility\n\n\n4\n22 Oct 2024\nManipulating and Summarizing Data\n\n\n5\n29 Oct 2024\nImporting, Exporting, and Cleaning Data\n\n\n6\n05 Nov 2024\nData Structures & Types\n\n\n7\n12 Nov 2024\nWorking with Text Data\n\n\n8\n19 Nov 2024\nWriting Functions\n\n\n9\n26 Nov 2024\nIteration\n\n\n10\n03 Dec 2024\nNext Steps",
    "crumbs": [
      "Lectures",
      "Lecture schedule"
    ]
  }
]