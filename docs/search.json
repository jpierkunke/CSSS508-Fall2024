[
  {
    "objectID": "Lectures/lectures.html",
    "href": "Lectures/lectures.html",
    "title": "Lecture schedule",
    "section": "",
    "text": "Please note that this schedule is subject to change.\n\n\n\nLecture\nDate\nTopic\n\n\n\n\n1\n01 Oct 2024\nIntroduction to R, R Studio, and Quarto\n\n\n2\n08 Oct 2024\nVisualizing Data\n\n\n3\n15 Oct 2024\nWorkflow and Reproducibility\n\n\n4\n22 Oct 2024\nManipulating and Summarizing Data\n\n\n5\n29 Oct 2024\nImporting, Exporting, and Cleaning Data\n\n\n6\n05 Nov 2024\nData Structures & Types\n\n\n7\n12 Nov 2024\nWorking with Text Data\n\n\n8\n19 Nov 2024\nWriting Functions\n\n\n9\n26 Nov 2024\nIteration\n\n\n10\n03 Dec 2024\nNext Steps"
  },
  {
    "objectID": "Lectures/lec2_data_manip.html",
    "href": "Lectures/lec2_data_manip.html",
    "title": "Day 2: Data manipulation and visualization",
    "section": "",
    "text": "Today we’ll be using a subset of the gapminder dataset including life expectancy at birth (in years), GDP per capita (in US dollars, inflation-adjusted), and population by country. You can load this into R directly from the gapminder package, but to practice reading data from a file, we will read it from the file “gapminder.csv”."
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#todays-dataset",
    "href": "Lectures/lec2_data_manip.html#todays-dataset",
    "title": "Day 2: Data manipulation and visualization",
    "section": "",
    "text": "Today we’ll be using a subset of the gapminder dataset including life expectancy at birth (in years), GDP per capita (in US dollars, inflation-adjusted), and population by country. You can load this into R directly from the gapminder package, but to practice reading data from a file, we will read it from the file “gapminder.csv”."
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#packages",
    "href": "Lectures/lec2_data_manip.html#packages",
    "title": "Day 2: Data manipulation and visualization",
    "section": "Packages",
    "text": "Packages\nWe will be using the tidyverse package today, which we installed yesterday. Which of the following commands will we need? Both? One? Neither? Why?\n\n# note: install.packages REQUIRES quotes around the package name\ninstall.packages(\"tidyverse\")\n# for library you can use quotes or not, doesn't matter\nlibrary(tidyverse)\n\n\n\n\n\n\n\nExpand this to check your answer…\n\n\n\n\n\nRemember that you pretty much only ever need to install a package with install.packages() once on a given device1, while you’ll need to load it using the library() function at the start of each R session that you want to use that package.\nToday we’ll be using the tidyverse package. If you haven’t installed tidyverse, you’ll need to first install it on your computer using the install.packages() function, then load it into your current R session using the library() function:\n\n# note: install.packages REQUIRES quotes around the package name\ninstall.packages(\"tidyverse\")\n# for library you can use quotes or not, doesn't matter\nlibrary(tidyverse)\n\nIf you have already installed tidyverse on your computer, then you just need the library() function:\n\nlibrary(tidyverse)\n\nIf you actually never closed your RStudio session from yesterday (which also means your computer must still be running), then you don’t even need to run the library() function."
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#reading-in-data-from-a-file",
    "href": "Lectures/lec2_data_manip.html#reading-in-data-from-a-file",
    "title": "Day 2: Data manipulation and visualization",
    "section": "Reading in data from a file",
    "text": "Reading in data from a file\nIn theory, you can just read the code in with one line:\n\ngapminder &lt;- read_csv(\"gapminder.csv\")\n\nDid that work for you? It may or may not. To know why, we need to talk a bit about how files are organized on your computer, and where R looks for things when you tell it to read in a file. This can be a bit painful and confusing at first, but once you know a bit about it, you can choose some systems that work for you.\nA file path is the path to a folder (directory) or file on your computer. File paths are specified in reference to a root directory or a home directory. So for example, on my computer, the file path “~/Documents/CSSS-math-camp-2024/gapminder.csv” means that in my home directory (signified by “~”), there should be a “Documents” folder, and in there should be a “CSSS-math-camp-2024” folder, and in there should be a file called “gapminder.csv”. This path may or may not exist; it’s an address, and a file may or may not actually live there, and one of those folders might not actually be in the folder it’s supposed to be in, etc.\nFile paths can be absolute or relative. An absolute file path is defined with reference to the root directory. For example, “/Users/jessicakunke/Documents/CSSS-math-camp-2024/gapminder.csv” is an absolute file path. On a Windows machine, the root directory is usually “C:\\”, and the slashes in the path are all backward slashes “\\” instead of forward slashes “/”. On Mac and Linux machines, the root directory is usually “/”.\n\n\n\n\n\n\nAn important note for Windows users\n\n\n\n\n\ntl;dr: use a double backslash instead of a single backslash throughout your Windows file paths.\nThe deets:\nUnfortunately, R and other languages use backslashes as an “escape character”. What does that mean? Consider how character values have to be surrounded by double quotes to indicate it’s a character value instead of a variable/object/function name. Then what do you do if your character string includes double quotes? You “escape” the quotes with a backslash:\n\n# these two lines won't work if you uncomment them\n# print(\"He said \"whooooaaa\"\")\n# cat(\"He said \"whooooaaa\"\")\n\n# but these work; note the different output of print and cat\nprint('He said \\\"whooooaaa\\\"')\ncat('He said \\\"whooooaaa\\\"')\n\nAs a result, if you want to include a backslash as a character, you need to escape it with another backslash:\n\n# these two lines won't work if you uncomment them\n#   specifically, they expect you to type more (they think the commands aren't \n#   complete) because the \\\" is interpreted as part of the character string and\n#   it's expecting another \" to end the character string\n# print(\"C:\\User\\Desktop\\\")\n# cat(\"C:\\User\\Desktop\\\")\n\n# but these work\nprint(\"C:\\\\User\\\\Desktop\\\\\")\ncat(\"C:\\\\User\\\\Desktop\\\\\")\n\n\n\n\nA relative file path is defined with reference to an arbitrary location. For example, “data/gapminder.csv” means, look in your current directory for a folder called “data”, and in there, look for a file called “gapminder.csv”.\nReading in the data with gapminder &lt;- read_csv(\"gapminder.csv\") will work if RStudio knows to look in the directory that contains our dataset. You can use the command getwd() (for “get working directory”) to see where RStudio is currently looking for your files. Any relative file paths you use are relative to this working directory. So when you say the file you want is “gapminder.csv”, you’re looking for that file in this directory.\nYou can organize your R projects using absolute paths, but this is not what I recommend if you are sharing your code or collaborating with others.\n\n\n\n\n\n\nExpand for tips on using absolute file paths\n\n\n\n\n\n\nCheck out setwd() and getwd()\nIn the RStudio Files pane, navigate to the data set you want, click the gear, select “Copy folder path to clipboard”, then paste that file path wherever you want the file path (e.g. inside read_csv()).\n\n\n\n\nA fairly painless and straightforward way to handle these file path challenges is to create an R Project. This R project will be associated with a folder where you put most or all of the code and data needed for the project. When you open the project in RStudio, it will tell RStudio to use that folder as “home base”. Then you specify all your file paths relative to that folder.\nLet’s try this approach. Create an R Project (File &gt; New Project) and select either New Directory or Existing Directory.\nOnce your new project opens, let’s see where the current working directory is (it should be the folder that you made the project in):\n\n# get working directory (getwd)\ngetwd()\n\nMake sure that gapminder.csv is in this directory, then try loading the file again as before:\n\ngapminder &lt;- read_csv(\"gapminder.csv\")\n\nTa-da!\nNotice this command is kind of noisy, printing out a bunch of stuff we don’t need. As the message says, we can make it “quieter” by setting another argument of the read_csv() function:\n\ngapminder &lt;- read_csv(\"gapminder.csv\", show_col_types = FALSE)\n\n\nCommenting your code\nMany languages have a comment character that allows you to “comment out” parts of your code so that R will not run them. In R, that comment character is the hashtag #.\nWhy would I ever want to do that?\n\nYou can (and should! please!) use this to write comments to yourself and others who read your code, to explain what you’re doing or why\n\nNotice that one of the code chunks above has a line like that: “get working directory (getwd)”\n\nYou can use this to temporarily not run certain lines, like if you’re troubleshooting code and you want to run the whole script start to finish but you want to skip some parts without deleting them\n\nLet’s test this out. What value does x have after this code chunk? Why?\n\nx = 9\nx = x + 2\nx = x - 5\n\nWhat about after this code chunk, which is the same except the middle line is commented out? Why?\nNote: to toggle back and forth between commented and uncommented, you can use the keyboard shortcuts shift-control-C or shift-command-C.\n\nx = 9\n# x = x + 2\nx = x - 5"
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#data-exploration",
    "href": "Lectures/lec2_data_manip.html#data-exploration",
    "title": "Day 2: Data manipulation and visualization",
    "section": "Data exploration",
    "text": "Data exploration\nWe already learned several things yesterday that we can use to explore this dataset. Let’s practice (and also learn some new things):\n\nHow many observations and variables are in this dataset?\nWhat range of years are represented in the dataset? At what intervals or what frequency (annual, biannual, …)?\nHow many countries and how many continents are in this dataset?\nHow many observations do we have on each continent?\n\n\nstr(gapminder)\nhead(gapminder)\ndim(gapminder)\nncol(gapminder)\nnames(gapminder)\n\n# what range of years?\nrange(gapminder$year)\n# how many unique years?\nn_distinct(gapminder$year)\n# what unique years?\nunique(gapminder$year)\n# what frequency?\ndiff(gapminder$year) # hmm... not what we want...\ndiff(unique(gapminder$year))\n\n# how many countries? continents?\nn_distinct(gapminder$country)\n# how many obs on each continent?\ntable(gapminder$continent)\n\nLet’s look at this dataset as a (sort-of) matrix for a moment:\n\n# how long is the country column? is it equal to the number of countries in the dataset?\nlength(gapminder$country)\n# actually it's the same as asking how many rows are in the dataset\nnrow(gapminder)\n\n# check out the first row\ngapminder[1,]\n\n# check out the first column\ngapminder[,1]\n\n# pick out the fourth row of the third column, two different ways\ngapminder[4,3]\ngapminder[4,\"year\"]\n\nLet’s figure something out together using what we learned yesterday about logicals and indexing: how many African countries are represented in this dataset? Which ones?\n\n\n\n\n\n\nYour Turn\n\n\n\n\nReplace the x and y placeholders to get the per-capita GDP for the 34th observation (your final code should not have any x or y):\n\n\ngapminder[x, y]\n\n\nHow many countries in Oceania are in this dataset? Which ones?\nHow many data points do we have for each country? Is it fairly balanced?"
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#data-manipulation",
    "href": "Lectures/lec2_data_manip.html#data-manipulation",
    "title": "Day 2: Data manipulation and visualization",
    "section": "Data manipulation",
    "text": "Data manipulation\nNow let’s see how to work with data using the tidyverse! We’ve actually already sneakily used two tidyverse functions– read_csv() and n_distinct()– but now we’ll really get into using tidyverse for manipulating data.\nBehind the tidyverse (and its name) is the idea of tidy data:\n\n\n\n\n\n\n\n\n\n\n\n(a) Tidy data\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Tidy vs. messy data\n\n\n\n\n\n\n\nFigure 1: Illustrations from the Openscapes blog “Tidy Data for reproducibility, efficiency, and collaboration” by Julia Lowndes and Allison Horst\n\n\n\n\n\n\nFiltering and selecting\nFiltering allows us to subset the dataset to just the rows that meet some condition:\n\nfilter(gapminder, continent == Oceania) # why doesn't this work? fix this line of code\nfilter(gapminder, continent == \"Oceania\" & year == 2007)\nfilter(gapminder, year&gt;1980 & year&lt;2000 & country == \"Eritrea\") \n\n# what's the difference between this and the previous line? and why doesn't this print anything?\neritrea = filter(gapminder, year&gt;1980 & year&lt;2000 & country == \"Eritrea\")\n\n# check out the documentation on filter to see its arguments\n?filter\n\nSelecting allows us to pick or look at just certain columns:\n\nselect(gapminder, pop)\nselect(gapminder, lifeExp:gdpPercap) # range of variables (columns)\nselect(gapminder, country, year) # specific variables/columns\n\nWe filter rows, and we select columns.\n\n\nAdding/changing columns (variables)\nLet’s add a column that indicates whether the data is from Afghanistan or not:\n\nmutate(gapminder, isAfghan = (country == \"Afghanistan\"))\n# how do we change the above line of code so that it stores the result somewhere?\n\nWe can also use mutate() to modify an existing column. For instance, we can make the year integer format:\n\ngap_int = mutate(gapminder, year = as.integer(year))\nstr(gap_int)\n\n\n\nCombining steps\nHere is some pseudocode to show the general flow for how we can combine steps. This means this pseudocode won’t run as is, but it gives us a general sense for how to put things together.\n\n# approach 1:\nnew_data = step1(gapminder)\nnew_data = step2(new_data)\nnew_data = step3(new_data)\n\n# approach 2:\nnew_data = step3(step2(step1(gapminder)))\n\nLet’s try this with a concrete example, with actual code we can run. For instance, let’s go back to a question we answered earlier without tidyverse: how many African countries are represented in this dataset, and which ones?\n\n# approach 1:\nnum_african_countries = filter(gapminder, continent == \"Africa\")\nnum_african_countries = select(num_african_countries, country)\nnum_african_countries = n_distinct(num_african_countries)\n\n# approach 2:\nnum_african_countries = n_distinct(select(filter(gapminder, continent == \"Africa\"), country))\n\n\n\n\n\n\n\nYour Turn\n\n\n\nWrite code that will do all of the following with the gapminder data:\n\nSubset the data to just the countries in Asia with at least 10 million people, then\nPick just the first four columns.\n\n\n\nWhat is annoying so far about combining these steps? In other words, what do you find annoying about Approaches 1 and 2?\n\n\nCombining steps with pipes\nPipes will make this better; they are a way of feeding one command into another. First let’s see how a pipe works with a single step. Use shift-control-M or shift-command-M to make the pipe symbol %&gt;%.\n\n# without pipe\nfilter(gapminder, continent == \"Oceania\")\n\n# with a pipe\ngapminder %&gt;% filter(continent == \"Oceania\")\n\nNow let’s see how this works with a sequence of commands by rewriting our example above about the number of African countries:\n\nnum_african_countries = gapminder %&gt;%\n  # subset to countries in Africa\n  filter(continent == \"Africa\") %&gt;%\n  # keep just the country column\n  select(country) %&gt;%\n  # count how many unique values there are\n  n_distinct()"
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#footnotes",
    "href": "Lectures/lec2_data_manip.html#footnotes",
    "title": "Day 2: Data manipulation and visualization",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou’ll also usually need to reinstall the packages you use with install.packages() if you update R.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSSS 508: Intro to R for Social Scientists",
    "section": "",
    "text": "Jess Kunke (she/they)\n\n\n\nTuesdays 4:30-6:20pm\nThomson Hall, Room 125\n\n\n\nWednesdays TBD\nFor further course details, please see the syllabus."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "CSSS 508: Intro to R for Social Scientists",
    "section": "",
    "text": "Jess Kunke (she/they)\n\n\n\nTuesdays 4:30-6:20pm\nThomson Hall, Room 125\n\n\n\nWednesdays TBD\nFor further course details, please see the syllabus."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome! I look forward to working with you this quarter.\nThis syllabus is subject to change. All changes will be announced in class and via Canvas announcements.\n\nOverview\nThis course is intended to give students a foundational understanding of programming in the statistical language R. This knowledge is intended to be broadly useful wherever you encounter data in your education and career.\nThis course has no prerequisites; we do not assume you have any prior programming experience with R or any other language. We will also cover almost no statistics, but this course should help prepare you for CSSS, STAT, or other departments’ methods courses so that you can focus on the methods they cover more than the coding itself. Additionally, the basic concepts you learn will be applicable to other programming languages and research in general, such as logic and algorithmic thinking.\n\n\nLearning objectives\nBy the end of the course, students will be able to…\n\nDevelop more confidence in their programming skills and their understanding of computation more broadly\nBe familiar with the RStudio application and the syntax of the R language\nOrganize and document coding projects for reproducibility and efficient workflow\nRead in data from a file and explore the data\nManipulate and reformat data for quality control, summary statistics, and other purposes\nCombine multiple data sets from different sources and of different types\nCreate beautiful, clear, and informative data visualizations\nCombine text, code, and output into reports using Quarto\nGain confidence troubleshooting, debugging, and learning how to do new things in R\n\n\n\nStructure\nThis course consists of a hands-on lecture and drop-in office hours, each once a week for two hours.\nIn person or remote? This course is intended to be primarily in person, but I recognize that life happens, so I will plan to hold lectures and office hours in a hybrid fashion in case you need to join remotely sometimes. This way we can also post lecture recordings in case you want to review something from class.\n\nLectures\nFor a schedule of lecture topics, please see the Lectures page. Note that the course will not meet during final exam week.\nPlease bring a laptop to class each week; I will spend a lot of class “live coding”, meaning I will move at a pace and in a sequence that is intended for you to code along with me and ask questions as they come up. I will also have some practice problems for you to work on during class. If you do not have a laptop you can bring to class and are not sure how to borrow one, please let me know in advance.\n\n\nOffice hours\nOffice hours are optional/drop-in and are a great space for asking questions, getting advice, or continuing discussions from class.\n\n\n\nResources\nThis course has no required text. I will guide you through content during lecture, and the lecture notes will all be here on this website. There are also many helpful resources available for free online if you would like further references along the way or after this class ends, and here is just a selection that you might find useful:\n\nR for Data Science by Hadley Wickham, Mine Çetinkaya-Rundel, & Garrett Grolemund.\n\n\n\nClass communication\n\nCourse content (lecture notes) and homework instructions will be posted here on this course website.\nYou will be submitting your assignments and peer reviews through Canvas.\nCheck your Canvas notification settings and make sure you get our course announcements! This is how I will send out homework clarifications, schedule changes, and other important information.\nPlease use Ed Discussion to post your questions to peers and provide some advice to others! I will also keep an eye on the discussions and step in as needed, but the primary goal is to encourage collaboration and discussion among members of the class.\nPlease also make good use of my office hours to address your questions and get extra practice with the material.\n\n\n\nAnonymous feedback\nThroughout the course, I welcome your feedback through this short anonymous feedback survey on what’s working for you about the class environment or format, what’s not, and any suggestions or ideas you have.\n\n\nGrading\nThis course is graded as credit/no credit. To pass you need to receive at least 60% of the available points. There will be 9 graded homework assignments, assigned weekly for the first 9 weeks of instruction. There are 4 points possible for each week that features a homework.\n\nHomework (75%; 3 points): These must be turned in as rendered Markdown documents which we will learn to create and for which templates are provided. They will be graded on a 0 to 3 point scale based on a simple effort-focused rubric found on the course website. These are designed first and foremost to develop skills rather than \"prove\" you have learned concepts. I encourage you to communicate and work together, so long as you write and explain your code yourself and do not copy work. You can learn a lot from replicating others' code, but you will learn nothing if you copy it without knowing how it works! In other words, you’re not really going to learn unless you do the coding yourself!\nPeer Review (25%; 1 point): Each week an assignment is due, students will be randomly assigned to grade another student's assignment following a 0 to 3 rubric. They will be expected to provide constructive feedback and commentary if something new was learned. Reading others' code is an important skill and you will write better code knowing others will see it. These reviews will be due 5 days after homework is due. Each peer review is worth 1 point and will be evaluated by the instructor on a binary satisfactory/not satisfactory scale.\nSchedule: We have a 2-hour interactive lecture/lab session on Tuesdays. Office Hours will be be held on Wednesdays. Homeworks will be due before class each Tuesday and peer reviews will be due 5 days later, by end-of-day on Sundays. Make sure to check the homework page or Canvas for all due dates!\n\n\n\n\n\n\n\nLate Homework Will Automatically Lose Peer-Review Credit\n\n\n\nPeer reviews are autmatically randomly assigned through Canvas at the due date. Therefore, if you don’t submit your homework on time, you will not be given a peer’s homework to review and vice versa. Life is messy and complicated and we all miss deadlines for a variety of reasons. If that happens, you can email me to request that I review and provide feedback on a late assignment, but you won’t be able to earn peer-review credit for that particular homework.\n\n\n\n\nClassroom Environment\nI’m committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed. This course is an attempt to make an often difficult and frustrating experience (learning R for the first time) less obfuscating, daunting, and stressful. That said, learning happens in different ways at at a different pace for everyone. Learning is also a collaborative and creative process and my aim is to create an environment in which you all feel comfortable asking questions of me and each other. Treat your peers and yourself with empathy and respect as you all approach this topic from a range of backgrounds and experiences (in programming and in life).\n\nNames & Pronouns: Everyone deserves to be addressed respectfully and correctly. You are welcome to send me your preferred name and correct gender pronouns at any time.\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting after class, coming to office hours, or sending me an email.\nDiversity: Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of university education. Therefore, I expect you to follow the UW Student Conduct Code in your interactions with your colleagues and me in this course by respecting the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, family status, gender identity and presentation, body size/shape, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, socioeconomic status, and veteran status.\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website. DRS offers resources and coordinates reasonable accommodations for students with disabilities and/or temporary health conditions. Reasonable accommodations are established through an interactive process between you, me (your instructor), and DRS. It is the policy and practice of the University of Washington to create inclusive and accessible learning environments consistent with federal and state law.\nAcademic Integrity: Academic integrity is essential to this course and to your learning. In this course, violations of the academic integrity policy include but are not limited to: copying from a peer, copying from an online resource, or using resources from a previous iteration of the course. That said, I hope you will collaborate with peers on assignments, and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work. Anything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask.\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW's policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form."
  },
  {
    "objectID": "Lectures/lec1_intro.html",
    "href": "Lectures/lec1_intro.html",
    "title": "Day 1: What are R and RStudio?",
    "section": "",
    "text": "We do not assume any prior computing knowledge, and we will take a practical hands-on approach. We will cover an introduction to the following topics:\n\nWhat is R, and why learn it? What can you use it for?\nIntro to R and to computing in general\nIntro to RStudio\nReading in data\nTidy data\nExploring, manipulating and plotting data in base R and using tidyverse\nBasic statistical tools, simulating from a distribution\nWriting and running scripts\nMatrices in R\nWriting your own functions\nFor-loops, vectorization, and efficient coding\nBenchmarking\nVersion control (with git)\nMaking R packages (why, when, and how?)\n\nWe will also get an introduction to Quarto for making documents, slides, and other products that mix text and code."
  },
  {
    "objectID": "Lectures/lec1_intro.html#scope-of-math-camp-content-this-week",
    "href": "Lectures/lec1_intro.html#scope-of-math-camp-content-this-week",
    "title": "Day 1: What are R and RStudio?",
    "section": "",
    "text": "We do not assume any prior computing knowledge, and we will take a practical hands-on approach. We will cover an introduction to the following topics:\n\nWhat is R, and why learn it? What can you use it for?\nIntro to R and to computing in general\nIntro to RStudio\nReading in data\nTidy data\nExploring, manipulating and plotting data in base R and using tidyverse\nBasic statistical tools, simulating from a distribution\nWriting and running scripts\nMatrices in R\nWriting your own functions\nFor-loops, vectorization, and efficient coding\nBenchmarking\nVersion control (with git)\nMaking R packages (why, when, and how?)\n\nWe will also get an introduction to Quarto for making documents, slides, and other products that mix text and code."
  },
  {
    "objectID": "Lectures/lec1_intro.html#what-are-r-and-rstudio",
    "href": "Lectures/lec1_intro.html#what-are-r-and-rstudio",
    "title": "Day 1: What are R and RStudio?",
    "section": "What are R and RStudio?",
    "text": "What are R and RStudio?\nR is a programming language.\nRStudio is an application for writing code, analyzing data and building packages with R.\n\na graphical user interface or GUI\nan integrated development environment or IDE\n\nWe will also learn some Quarto, which is a tool we can use within RStudio (and other applications actually) to make reports, manuscripts, slides, books, websites, and more.\n\n\n\n\n\n\nFun facts\n\n\n\n\nR has been around since 1993\nRStudio has been around since 2009\nRStudio was the name of both the application and the company that developed it, until the company renamed itself Posit in 2021 to signal that it was moving toward developing language-agnostic tools such as Quarto that can interface with Python, Julia, and other languages\n\n\n\n\n\n\n\n\n\nDiscussion\n\n\n\nHow is R related to or different from other languages and software such as Stata, Excel, Python, C?"
  },
  {
    "objectID": "Lectures/lec1_intro.html#why-bother-with-r",
    "href": "Lectures/lec1_intro.html#why-bother-with-r",
    "title": "Day 1: What are R and RStudio?",
    "section": "Why bother with R?",
    "text": "Why bother with R?\n\nMultifunctionality\n\nData access (e.g. tidycensus)\nData manipulation\nStatistical analysis\nPublication-quality data visualizations and tables\nInteractive tables, visualizations, widgets, applications\nGIS\n\nR is a GIS itself\nIt can also connect to ArcGIS, QGIS, and GRASS GIS\n\nWorks for many data types and formats: spatial data, network data, spreadsheets, surveys, SQL data bases, …\n\n\n\n\nAutomation\n\nScripts\n\nRecord the set of instructions for your analysis from start to finish in a script, store and use it like a recipe\nIf you want to make one change, you can just make that one change to your script and rerun the script rather than having to repeat individual steps over and over\n\nFunctions\n\nFor tasks you’ll run over and over again, even across different projects\n\nFor-loops and other types of control flow\n\nIteration, conditional instructions, etc.\n\nText and data reformatting\n\n\n\n\nReproducibility and quality control\n\nSomeone else can look at your script and see exactly what you did1\nFuture You can look at your script to remind yourself exactly what you did\nSomeone else/future you can run your script to exactly reproduce what you did\nIf you’re troubleshooting or still developing your procedures, you can step through the instructions\n\n\n\n\nOpen source\n\nR is free and open source, and developed and maintained by a large user community (well maintained and new packages come out a lot).\n\n\n\n\nCommon\n\nCoursework, research, and statistical code often use R."
  },
  {
    "objectID": "Lectures/lec1_intro.html#orienting-yourself-in-rstudio",
    "href": "Lectures/lec1_intro.html#orienting-yourself-in-rstudio",
    "title": "Day 1: What are R and RStudio?",
    "section": "Orienting yourself in RStudio",
    "text": "Orienting yourself in RStudio\nAs the previous section suggests, sometimes you might be in development mode, iteratively designing your analysis/plots/output. Other times you might just be trying to run code that you or someone else has already written.\nIn this section, we’ll see how to use different parts of the RStudio window for these different modes.\nRStudio has four main panes that allow you to organize your code and have a better user experience developing and using R code. We’ll revisit the different purposes of, and relationships among, these four panes over the course of the week. Notice that many of the panes have multiple tabs (e.g. Console vs Terminal) that you can toggle between.\n\nSource pane\n\nEdit scripts and other files that allow you to save your code\nView objects that appear when you click on them in the Environment pane\n(If you use Quarto/R Markdown, your output and plots may appear here)\n\nConsole/Terminal/Background Jobs pane\n\nWhen you run code, even from a script, the code and its text/printed output appears here in the Console\nYou can also run code from the Console itself\nIf you use Quarto or R Markdown, when you knit your file, the Background Jobs tab here will show the results of knitting and any errors that might occur\nYou can run shell/bash commands like cd, ls or pwd in the Terminal tab just as you would in the Terminal application on your computer\n\nEnvironment/History pane\n\nImport data\nSee what objects you’ve created (such as variables, data sets, model results) that are currently “stored in your environment”\nLook at your command history and rerun previous commands\nIf you develop R packages or use version control like git, the Build and Git tabs will appear here\n\nFiles/Plots/Help pane\n\nNavigate files and folders in the Files tab\nCopy folder paths to paste into your code using the gear symbol under the Files tab\nWhen you make plots, they generally appear in the Plots tab\nRead help documentation for packages and functions in the Help tab\nSee your rendered Quarto/R Markdown document in the Viewer tab\n\n\nThe meaning of these different terms and tasks will become clearer as we practice them.\nIf you open RStudio by opening the application directly instead of opening an R file, then you will not have the Source pane open and likely the Console pane will take up the entire left half of your window:\n\nIf instead you open RStudio by clicking on an R file, this screenshot shows the likely order in which the four panes appear on your screen, though you can change the order under Preferences. Here I have two files open: RLab1 and a file whose name starts with exploratory-data-analysis-lesson. When the filename is red with an asterisk, as you see below for the file RLab1, the file has changes that have not been saved yet.\n\nYou can rearrange your panes at any time by going to Preferences &gt; Pane Layout. You can also resize/adjust the panes by clicking and dragging their boundaries."
  },
  {
    "objectID": "Lectures/lec1_intro.html#packages-and-environment",
    "href": "Lectures/lec1_intro.html#packages-and-environment",
    "title": "Day 1: What are R and RStudio?",
    "section": "Packages and environment",
    "text": "Packages and environment\nThe different functions/programs we use in R are organized or bundled into what are called packages. A handful packages come with R when you download and install it, but most of them you install afterwards when you want them. It’s easy and quick to install or update packages when you need them.\nClick on the Packages tab in the Files pane. You’ll see some list of names in blue with checkboxes next to them; this is the list of packages that you have installed on your computer.\nA key point: once you install a package, there is an additional step you need to do before using it. This is a good example to help us understand the concept of the R “environment” or “session”.\n\nInstalling a package makes the programs in that package available on your computer. It’s like buying a baking ingredient and putting it on your shelf at home.\nBefore you can use it, you have to take it off the shelf and put it on the counter or wherever you’re going to bake, whatever your workspace is. Similarly, you have to load/attach the package to your current R environment before you can use it.\nIf you don’t need an ingredient or it’s in your way, you can put it back on the shelf. Similarly, you can unload/detach a package at any time.\nWhen you’re done baking, you put everything away. Similarly, when you quit R, all your packages are unloaded or detached, so when you open R again next time, you’ll need to load/attach the ones you need before you start working with them.\nJust like you can take out all your ingredients at once or one at a time as needed, you can do the same with packages. When you save your code as a script, we generally recommend loading them all at the start so that it’s easy to tell by just looking at the top of the script which packages are required for the code you’re writing/using. When you’re using R interactively, though, you can add and detach packages throughout the session.\n\nWhen you look at the Packages tab, the packages that have a checkmark next to them are the ones loaded in your current R session for you to use right now, and the unchecked ones are installed but not currently loaded.\nThe first time you use a package, you’ll need to install it:\n\n# this function requires quotes around the package name!\ninstall.packages(\"tidyverse\")\n\nThen whenever you want to use it, you can load/attach it:\n\n# for this one, you can use quotes or not\nlibrary(tidyverse)\n\n\n\n\n\n\n\nTips\n\n\n\n\nNotice that when you start typing, R suggests different options and you can use the up and down arrows to select the right one and hit enter to autocomplete it; this can save a lot of typing.\nThis is also a handy way to test whether you already have a package: run the library() command, and if it completes successfully then you already have it installed, and otherwise it will let you the package wasn’t found.\n\n\n\nWe’ll use this tidyverse package a lot this week. In fact, tidyverse is actually a set or suite of packages that have been grouped together so that you can do just one install command and one library command when you want to use them."
  },
  {
    "objectID": "Lectures/lec1_intro.html#lets-start-working-with-data",
    "href": "Lectures/lec1_intro.html#lets-start-working-with-data",
    "title": "Day 1: What are R and RStudio?",
    "section": "Let’s start working with data!",
    "text": "Let’s start working with data!\nMany R packages come with built-in data sets, that can be loaded using the data() function. We will use a data set called midwest which is included in the ggplot2 package (part of the tidyverse suite, so library(tidyverse) has already loaded ggplot2). Each row of the midwest data represents a county in one of the five states making up the United State’s Midwest region, and contains information about the county’s population and demographics.\nLet’s try some different commands to explore the data. Notice that the text with a hashtag # before it appears in green; those are comments, and the comment character # tells R that any text after it on the same line is meant for humans only, that it shouldn’t run it like code. Other languages have different comment characters.\n\ndata(midwest) # loads the data set; where does it appear?\nstr(midwest)  # tells you about the STRucture of the data set\nhead(midwest) # what does this do?\nsummary(midwest) # what does this tell you?\n?midwest      # brings up a help/description page to tell you more about the data set; often has citations\ndata()        # this tells you about all the data sets available in your current environment\n\n\n\n\n\n\n\nYour Turn\n\n\n\nTry the above commands, see what they do, and try to answer the following questions about the data:\n\nWhere is the data from?\nHow many variables are in this data set, and what are they?\nHow many rows are in this data set, and what do they represent? Do you have a row for every respondent to a survey? Every state of the US?\nWhat format is each variable in?\nHow do you take a look at the first few rows? Last few rows?\nWhat questions do you still have about the data?"
  },
  {
    "objectID": "Lectures/lec1_intro.html#how-to-do-math-in-r",
    "href": "Lectures/lec1_intro.html#how-to-do-math-in-r",
    "title": "Day 1: What are R and RStudio?",
    "section": "How to do math in R",
    "text": "How to do math in R\nClick in the Console pane and you should see the cursor blinking next to a greater-than symbol &gt; which we call the command line prompt. This is where you can type commands for R to run.\nLet’s try a few different commands. To start, type 3+2 and press enter:\n\nWe can do basic mathematical computations using +, -, * (multiplication), / (division), and () (grouping). Try the following lines, one line at a time. I recommend typing them yourselves instead of copying and pasting. You can skip the lines with text; these are called comments.\n\n2+3\n6*7/2\n# The number pi is hard coded into R\npi*1\n# Why should the following two lines give you different results? What is the order of operations in each one?\n6*3/2-3\n6*3/(2-3) # create this line by using the up arrow to copy the previous command and edit it\n# What will dividing by zero give you?\n1/0\n\n\n\n\n\n\n\nYour Turn\n\n\n\nTry some on your own!\nWhat about more complicated functions like exponents, square roots, trig functions and the natural logarithm?\nSee if you can compute the following values yourself before you run them in R, then run them in R and see if you get the answer you expected.\n\n3^2\n2^(3+2)\nsqrt(9)\nlog(exp(1)^2)\nlog(1000)\nexp(2)\nsin(2*pi)\n\nNote that log() computes the natural logarithm (base \\(e\\)) by default. See ?log to compute a logarithm with a different base; how would you compute \\(\\log_{10}(1000)\\) and what should the correct answer be? Verify it by running your command into the R console."
  },
  {
    "objectID": "Lectures/lec1_intro.html#creating-objects-and-assigning-values",
    "href": "Lectures/lec1_intro.html#creating-objects-and-assigning-values",
    "title": "Day 1: What are R and RStudio?",
    "section": "Creating objects and assigning values",
    "text": "Creating objects and assigning values\nSo far, we have been calculating things in R without storing them anywhere. For data analysis and statistics, we need to be able to store and manipulate information instead of just computing things.\nWe also haven’t been storing our calculations, our code, anywhere. If we want to edit them, we need to retype them. And right now we can scroll back through our command history to remind ourselves what we did and in what order, but what about tomorrow or next month? How can we store them to rerun or edit later?\nNumbers, data, formulas, and other statistical information can be stored as . In RStudio, the objects you make and some information about them can be seen in the Environment pane.\nFor example, if you type the following line into the console,\n\nx = 4\n\nyou will notice that the blank command line reappears without any output having been printed. All R did was store the number 4 under the name x; we call this “assigning the value 4 to the variable \\(x\\)”, so you may hear people refer to = as an assignment operator. You can also see under the Environment pane that you now have a variable x that is equal to 4.\nAnother way to assign a value is to use the &lt;- assignment operator:\n\nx &lt;- 4\n\n\n\n\n\n\n\nHeads up\n\n\n\n\nObject names are case-sensitive\nObject names should be meaningful and short (“best practice”)\nWhat’s the difference between &lt;- and =, and which should we use when?\n\nIf you plan to use pre-2001 R code or you want to be 100% backwards compatible just in case, use &lt;-\nOtherwise it’s a matter of preference\nIf you use &lt;-, put a space on either side to improve readability and to avoid confusion with a less-than comparison\n\n\n\n\nRun the following code line by line to see how x changes each time. What value does x have after this whole code chunk?\n\nx = 9 # here we assign x the value 9, and R will not print anything\nx # here we're not assigning anything; R will just print the current value of x\nx = x + 2\nx\nx = x - 5\nx\n\nWhat happens if you try to use a variable you haven’t created yet? For example, what happens if you run this line of code?\n\ny - 3\n\nLet’s try creating a little data set. Maybe we have data from a household survey on income, the number of household members, and the highest education level in the household. We can create of data, lists of values of the same type, using the function c(). (Here the c stands for concatenate, or to make into a chain.)\n\n\n\n\n\n\nImportant\n\n\n\nThis may feel like a toy example, because it is. However, it’s often really helpful to make your own toy data sets when developing code because it’s easier to verify that your code does what you want it to do on a small, simple data set. We often call this creating a minimal reproducible example. This is really helpful not only for your own testing but for those times when you want to ask for help from your instructor/TA/colleague.\n\n\nObjects can be numbers, strings, matrices, or even more complicated R objects. Examples of R object types:\n\ninteger, numeric, string\nvector, matrix, list\ndata.frame\nfactor\nlm object (linear model object, e.g. regression)\nformula\n\n\nid = 1:5\nid # to see what this new id object looks like\ntypeof(id)\nhh_income = c(32, 40, 36, 55, 18)\nhh_members = c(3, 5, 5, 3, 4)\nhh_edu = c(\"high school\", \"high school\", \"some graduate\", \"college\", \"high school\")\n\nWe can combine these individual vectors into a data set:\n\nhh_data = data.frame(id, hh_income, hh_members, hh_edu)\n\nWe can see the types of our data columns (and some other information about the data set) using str():\n\nstr(hh_data)"
  },
  {
    "objectID": "Lectures/lec1_intro.html#r-scripts-and-best-practice",
    "href": "Lectures/lec1_intro.html#r-scripts-and-best-practice",
    "title": "Day 1: What are R and RStudio?",
    "section": "R scripts and best practice",
    "text": "R scripts and best practice\nTyping commands directly into the console is nice sometimes, especially for developing code or testing things out. If you quit, though, the commands you typed and the results you obtained disappear and will not be there when you reopen RStudio later. To save them, you can store the commands in a file. The simplest kind of file is called a script.\nOpen a new .R script by clicking File \\(\\rightarrow\\) New File \\(\\rightarrow\\) R Script. This will appear in the Source pane of your RStudio window.\nCopy and paste the following lines of code into your script file:\n\nid = 1:5\nid # to see what this new id object looks like\ntypeof(id)\nhh_income = c(32, 40, 36, 55, 18)\nhh_members = c(3, 5, 5, 3, 4)\nhh_edu = c(\"high school\", \"high school\", \"some graduate\", \"college\", \"high school\")\nhh_data = data.frame(id, hh_income, hh_members, hh_edu)\nstr(hh_data)\n\nYou can run code many different ways. Here are two:\n\nExecute a chunk of the code by highlighting it in the script file and typing command-return (Mac) or control-return (PC).\nAlternatively, you can run the code line by line. Place your cursor anywhere on the first line you want to run and type command-return (Mac) or control-return (PC). If you keep repeating this key sequence, you will keep running the lines of code in sequence. Try this out!\n\n\nCommenting your code\nIt is good practice to annotate your scripts by including comments that describe what your code does. To do this, you can include lines that start with #; these lines will be treated as comments and they are not run as code. For example, above I made a comment to explain that the second line lets us see what the id object looks like.\nYou can also use the comment character # to “comment out” code. For example, what value does x have after this code chunk?\n\nx = 9\nx = x + 2\nx = x - 5\n\nWhat about after this code chunk, which is the same except the middle line is commented out?\n\nx = 9\n# x = x + 2\nx = x - 5\n\n\n\nWhen is code run?\nNote that code in your script file is not run until you run it. Therefore, it is also not necessarily run in the order that it is in your script; it is run in whatever order you execute it. For instance, if you quit RStudio, reopen it, and run just the last line of the script, you will receive an error.\nAlso, if you edit code in the script, it does not update the variables you have already created in your working environment unless you rerun the code. Let’s practice this with our data set example above.\nRelated: Where does the name Environment pane come from? From the time you open RStudio to the time you close it, we say you are running a session. When you create variables like this, they exist in your working environment which means that they are defined and accessible within R. This is separate from whether they are stored somewhere on your computer for you to access after you close R. This means two things, which will be particularly relevant when we read in and manipulate data sets:\n\nWhen you open R or RStudio, data on your computer or anywhere else is not automatically available to analyze in R; first you have to load it and store it as an R object.\nOnce you create an object in R, the object exists only during this session unless you save it to a file if you want to be able to access it again later without recreating it. If the object takes a long time to create, this is the best option. Otherwise, the better alternative is usually to save the code you used to create the object, and then you can recreate it easily anytime you need it.\n\n\n\n\n\n\n\nYour Turn\n\n\n\nAs one last practice session for today, write a script with code that you learned about from today.\n\nMake sure each instruction appears in the order you would want to run it.\nUse comments to organize and explain it to yourself for tomorrow, as well as for a month or a year from now.\nThen trade code with another math camp participant to give each other feedback. Please share at least one thing that you like about (or learned from) the other person’s code and at least one suggestion or idea you have for their code."
  },
  {
    "objectID": "Lectures/lec1_intro.html#extra-resources",
    "href": "Lectures/lec1_intro.html#extra-resources",
    "title": "Day 1: What are R and RStudio?",
    "section": "Extra resources",
    "text": "Extra resources\n\nSome of many R tutorials and resources you might find useful, in no particular order:\n\nR for Data Science. Free online textbook by Hadley Wickham.\nR and Social Science. Free online textbook by Michael Clark.\nR for Social Science. Open curriculum/tutorial by the Carpentries.\nIntro to R for Social Scientists. Tutorial by Jasper Dag Tjaden.\nR for Non-Programmers: A Guide for Social Scientists. Free online textbook by Daniel Dauber.\n\nWorking with census and American Community Survey (ACS) data in R:\n\nR, python, and other code developed by ACS users\nA webinar recording on using ACS data in R and python\n\nHandy tool for graphing functions: Desmos calculator"
  },
  {
    "objectID": "Lectures/lec1_intro.html#footnotes",
    "href": "Lectures/lec1_intro.html#footnotes",
    "title": "Day 1: What are R and RStudio?",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nComment and organize your code well!↩︎"
  }
]