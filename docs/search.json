[
  {
    "objectID": "Lectures/quarto_anatomy.html",
    "href": "Lectures/quarto_anatomy.html",
    "title": "ggplot2 demo",
    "section": "",
    "text": "Figure 1 further explores the impact of temperature on ozone level.\n\n\nCode\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n\n\nFigure 1: Temperature and ozone level."
  },
  {
    "objectID": "Lectures/quarto_anatomy.html#air-quality",
    "href": "Lectures/quarto_anatomy.html#air-quality",
    "title": "ggplot2 demo",
    "section": "",
    "text": "Figure 1 further explores the impact of temperature on ozone level.\n\n\nCode\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n\n\n\n\n\n\n\n\nFigure 1: Temperature and ozone level."
  },
  {
    "objectID": "Lectures/lec3_data_manip_tidyverse.html",
    "href": "Lectures/lec3_data_manip_tidyverse.html",
    "title": "Lecture 3: Tidyverse!",
    "section": "",
    "text": "How I feel about R, over time. Illustration credit: Allison Horst.",
    "crumbs": [
      "Lectures",
      "Lecture 3: Data manipulation with tidyverse"
    ]
  },
  {
    "objectID": "Lectures/lec3_data_manip_tidyverse.html#summary-statistics",
    "href": "Lectures/lec3_data_manip_tidyverse.html#summary-statistics",
    "title": "Lecture 3: Tidyverse!",
    "section": "Summary statistics",
    "text": "Summary statistics\nHow many data points do we have for each continent? Here’s how we could use tidyverse to find out:\n\ngapminder %&gt;%\n  group_by(continent) %&gt;%\n  summarize(n.obs = n())\n\nWhat about other summary statistics, like the minimum, average, and maximum country population on each continent?\n\ngapminder %&gt;%\n  group_by(continent) %&gt;%\n  summarize(\n    min_pop = min(pop),\n    mean_pop = mean(pop),\n    max_pop = max(pop)\n  )\n\nAs always, if you want to store the results as an object in R so you can do other stuff with it later, you can do that by assignment:\n\ncontinent_stats = gapminder %&gt;%\n  group_by(continent) %&gt;%\n  summarize(\n    min_pop = min(pop),\n    mean_pop = mean(pop),\n    max_pop = max(pop)\n  )\n\nWe can also group by more than one thing if we want to define groups by more than one variable. For example, how many data points do we have for each continent and each year?\n\nn_obs_by_cont_year &lt;- gapminder %&gt;%\n  group_by(continent, year) %&gt;%\n  summarize(n.obs = n())\n\nWhat happens if we switch the order of the grouping variables?\n\nn_obs_by_year_cont &lt;- gapminder %&gt;%\n  group_by(year, continent) %&gt;%\n  summarize(n.obs = n())\n\nNotice that the table structure is not ideal; we’ll address this when we cover pivoting! We’ll also find that useful for plots.\n\n\n\n\n\n\nYour Turn\n\n\n\n\nLet’s return to our earlier question: Does each country has data for the same years, or are the years represented in the data different for some countries? Use tidyverse to figure this out.\nFilter the gapminder dataset for only the data on Italy, then compute the average per-capita GDP for each year in that Italy dataset.\n\n\n\n\n\n\n\n\n\nSolutions\n\n\n\n\n\nThere may be multiple approaches, but here are some:\n\n\n\n\ngapminder %&gt;%\n  group_by(country, year) %&gt;%\n  summarize(nobs = n())\n\n\n\n\n\ngapminder %&gt;%\n  filter(country == \"Italy\") %&gt;%\n  group_by(year) %&gt;%\n  summarize(avg_gdp = mean(gdpPercap))",
    "crumbs": [
      "Lectures",
      "Lecture 3: Data manipulation with tidyverse"
    ]
  },
  {
    "objectID": "Lectures/lec3_data_manip_tidyverse.html#footnotes",
    "href": "Lectures/lec3_data_manip_tidyverse.html#footnotes",
    "title": "Lecture 3: Tidyverse!",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou’ll also usually need to reinstall the packages you use with install.packages() if you update R.↩︎",
    "crumbs": [
      "Lectures",
      "Lecture 3: Data manipulation with tidyverse"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html",
    "href": "Lectures/lec1_intro.html",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "",
    "text": "Let’s introduce ourselves!\n\nName, pronouns\nProgram, year\nAny experience with programming or R? (None required!)\nHow do you feel about the course or what are your goals in taking this class?\nWhat is one thing you like about fall?",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#incomplete-code",
    "href": "Lectures/lec1_intro.html#incomplete-code",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Incomplete code",
    "text": "Incomplete code\nThe console is ready to receive your code when it shows the little carrot command prompt &gt;. If you mess up (e.g. leave off a parenthesis), R might instead show a + sign prompting you to finish the command:\n\n3*(11-2\n+\n\nIf this happens, finish the command or hit Esc to get out of this.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#arithmetic-in-r",
    "href": "Lectures/lec1_intro.html#arithmetic-in-r",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Arithmetic in R",
    "text": "Arithmetic in R\nWe can do basic mathematical computations using +, -, * (multiplication), / (division), and () (grouping). Try the following lines, one line at a time. I recommend typing them yourselves instead of copying and pasting.\n\n2+3\n6*7/2\n# The number pi is hard coded into R\npi*1\n# Why should the following two lines give you different results? What is the order of operations in each one?\n6*3/2-3\n6*3/(2-3) # create this line by using the up arrow to copy the previous command and edit it\n2^(3+2)\n# What will dividing by zero give you?\n1/0\n0/0\n\nA few notes:\n\nThere are some special values in R, like NaN and Inf.\nOperations follow the usual order of operations (PEMDAS).\nNotice that the lines starting with the hashtag or pound key # are ignored by R: they appear in the Console but R knows this is not code but something for the human to read. We call these comments and we’ll cover this more later. Other languages have different comment characters that function like # does in R.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#functions",
    "href": "Lectures/lec1_intro.html#functions",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Functions",
    "text": "Functions\nsqrt() is an example of a function in R. Arguments are the inputs to a function. In this case, the only argument to sqrt() is x which can be a number or a vector of numbers.\nThe basic template of a function is\nfunction_name(argument1, argument2 = value2, argument3 = value3...)\n\n\n\n\n\n\nNote\n\n\n\nFunctions can have a wide range of arguments and some are required for the function to run, while others remain optional. You can see from each functions’ help page which are not required because they will have an = with some default value pre-selected. If there is no = it is up to the user to define that value and it’s therefore a required specification.\nR is case-sensitive, so if the function is called sqrt, then typing SQRT(100) and Sqrt(100) will give you an error or use some other function if there’s one defined under that name!\n\n\nLet’s try out some other functions:\n\nsqrt(9)\nlog(exp(1)^2)\nlog(1000)\nexp(2)\nsin(2*pi)\n\nNote that log() computes the natural logarithm (base \\(e\\)) by default. See ?log to compute a logarithm with a different base; how would you compute \\(\\log_{10}(1000)\\) and what should the correct answer be? Verify it by running your command into the R console.\nIf you know the name of a function and want to learn more about how to use it, you can access the help documentation by typing ?sqrt in the Console and look at the Help panel on the bottom right.\n\n?sqrt\n\nHelp files provide documentation on how to use functions and what functions produce. They generally consist of the following sections:\n\nDescription - What does it do?\nUsage - How do you write it?\nArguments - What arguments does it take, which are required, and what are the defaults?\nDetails - A more in-depth description\nValue - What does the function return?\nSee Also - Related R functions\nExamples - Example (& reproducible) code\n\nIf you’re trying to look up the help page for a function and can’t remember its name, you can search by a keyword and you will get a list of help pages containing said keyword.\n\n??exponential\n\nYou can also Google “r” and a description of what you’re trying to do.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#calling-objects",
    "href": "Lectures/lec1_intro.html#calling-objects",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Calling Objects",
    "text": "Calling Objects\nYou can display or “call” an object simply by using its name.\n\nheight\n\n[1] 65",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#naming-objects",
    "href": "Lectures/lec1_intro.html#naming-objects",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Naming Objects",
    "text": "Naming Objects\nObject names are case-sensitive and should be meaningful.\nObject names must begin with a letter and can contain letters, numbers, ., and _.\nTry to be consistent in naming objects. RStudio auto-complete means descriptive names are better than short, vague ones! Good names save confusion later!\n\nsnake_case, where you separate lowercase words with _ is a common and practical naming convention that I strongly recommend.\n\n\nsnake_case_is_easy_to_read\nCamelCaseIsAlsoAnOptionButSortOfHardToReadQuickly\nsome.people.use.periods # not recommended because of how R sometimes uses periods",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#using-objects",
    "href": "Lectures/lec1_intro.html#using-objects",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Using Objects",
    "text": "Using Objects\nAn object’s name represents the information stored in that object, so you can treat the object’s name as if it were the values stored inside. Just like math variables, the name is a placeholder for what is stored in it.\n\nheight + 10\n\n[1] 75\n\nheight + height\n\n[1] 130\n\nsqrt(height)\n\n[1] 8.062258",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#object-types",
    "href": "Lectures/lec1_intro.html#object-types",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Object types",
    "text": "Object types\nA vector is one of many data types available in R. Specifically, it is a series of elements, such as numbers, strings, or booleans (i.e. TRUE, FALSE).\nYou can create a vector using the function c() which stands for “combine” or “concatenate”.\n\nheight &lt;- c(60, 65, 52, 71)\nheight\n\n[1] 60 65 52 71\n\n\nIf you name an object the same name as an existing object, it will overwrite it.\nYou can provide a vector as an argument for many functions as we saw before:\n\nsqrt(height)\n\n[1] 7.745967 8.062258 7.211103 8.426150\n\n\nThere are other, more complex data types in R which we will discuss later in the quarter! These include matrices, arrays, lists, and dataframes.\nMost data sets you will work with will be read into R and stored as a dataframe, so this course will mainly focus on manipulating and visualizing these objects.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#exploring-a-dataset",
    "href": "Lectures/lec1_intro.html#exploring-a-dataset",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Exploring a dataset",
    "text": "Exploring a dataset\nWe can load the built-in data swiss, which loads as a dataframe, a type of object mentioned earlier. Then, we can look at it in a couple different ways.\ndata(swiss) loads this dataframe into the Global Environment.\nView(swiss) pops up a Viewer tab in the source pane (“interactive” use only, don’t put in Quarto document!).\nsummary() displays summary information. Note that R is object-oriented, and the one function summary() provides different information for different types of objects.\n\ndata(swiss) # loads the data set; where does it appear?\nView(swiss)\nstr(swiss)  # tells you about the STRucture of the data set\nhead(swiss) # what does this do?\nsummary(swiss) # what does this tell you?\n?swiss      # brings up a help/description page to tell you more about the data set; often has citations\ndata()        # this tells you about all the data sets available in your current environment\n\n\n\n\n\n\n\nYour Turn\n\n\n\nTry the above commands, see what they do, and try to answer the following questions about the data:\n\nWhere is the data from?\nHow many variables are in this data set, and what are they?\nHow many rows are in this data set, and what do they represent? Do you have a row for every respondent to a survey? Every state of the US?\nWhat format is each variable in?\nHow do you take a look at the first few rows? Last few rows?\nWhat questions do you still have about the data?",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#basic-plots-in-base-r",
    "href": "Lectures/lec1_intro.html#basic-plots-in-base-r",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Basic plots in base R",
    "text": "Basic plots in base R\nhist() generates a histogram of a vector. Note that you can access a vector that is a column of a dataframe using $, the extract operator.\n\nhist(swiss$Education) # Histogram\n\n\n\n\n\n\n\n\nWe can try and make this histogram more informative and appealing by specifying more arguments:\n\nhist(swiss$Education,\n  breaks = 10, # affects the number of bins\n  xlab = \"Percent of draftees with education beyond primary school\", # x-axis label\n  main = \"Histogram of education level\") # Title\n\n\n\n\n\n\n\n\nWe can experiment with colors and shapes.\nWe can make scatterplots to show the relationship between two variables.\n\nplot(Education ~ Agriculture,\n  data = swiss,\n  xlab = \"Percent of males involved in agriculture as occupation\",\n  ylab = \"Percent draftees with education beyond primary school\",\n  main = \"Agriculture and education\",\n  pch = 16) # Point shape\nabline(h = mean(swiss$Education), col = \"firebrick\") # add horizontal line (y-value)\nabline(v = mean(swiss$Agriculture), col = \"cornflowerblue\") # add vertical line (x-value)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nEducation ~ Agriculture is a formula of the type y ~ x. The first element (Education) gets plotted on the y-axis and the second (Agriculture) goes on the x-axis. Regression formulae follow this convention as well!\n\n\nWe can check out pairs(), a pairwise scatterplot function. This function is good for a quick look at small datasets with numerical/continuous data.\n\npairs(swiss, \n      pch = 8, \n      col = \"violet\",\n      main = \"Pairwise comparisons of Swiss variables\")",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#creating-a-quarto-document",
    "href": "Lectures/lec1_intro.html#creating-a-quarto-document",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Creating a Quarto Document",
    "text": "Creating a Quarto Document\nLet’s try making an Quarto file:\n\nChoose File &gt; New File &gt; Quarto Document…\nMake sure HTML Output is selected\nIn the Title box call this test document My First Qmd and click Create\nSave this document somewhere (you can delete it later) (either with File &gt; Save or clicking     towards the top left of the source pane).\nLastly, click     Render at the top of the source pan to “knit” your document into an html file. This will produce a minimal webpage since we only have a title. We need to add more content!\n\nNote: Please don’t do this now, and you won’t need this for this course, but if you want to create PDF output in the future, you’ll need to run the following code in your console.\n\ninstall.packages(\"quarto\")\ninstall.packages('tinytex')\ntinytex::install_tinytex()",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#anatomy-of-a-quarto-document",
    "href": "Lectures/lec1_intro.html#anatomy-of-a-quarto-document",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Anatomy of a Quarto Document",
    "text": "Anatomy of a Quarto Document\nElements of a Quarto document:\n\nAn (optional) YAML header (surrounded by ---s).\nPlain text and any associated formatting.\nChunks of code (surrounded by ``` s) and/or their output.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#r-code-in-a-quarto-document",
    "href": "Lectures/lec1_intro.html#r-code-in-a-quarto-document",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "R code in a Quarto document",
    "text": "R code in a Quarto document\nInside Quarto, lines of R code are called chunks. Code is sandwiched between sets of three backticks and {r}.\nIn quarto documents, you can click within a code chunk and click the green arrow     to run the chunk. The button beside that (   ) runs all prior chunks.\nYou can change whether the output shows up in the quarto document or in your console by clicking the gear symbol for Settings and selecting either “Chunk Output Inline” or “Chunk Output in Console”.\n\nCode chunk options\nChunks have options that control what happens with their code. They are specified as special comments at the top of a block. For example:\n```{{r}}\n#| label: bar-chart\n#| eval: false\n#| fig-cap: \"A line plot on a polar axis\"\n```\nSome useful and common options include:\n\necho: false - Keeps R code from being shown in the document\neval: false - Shows R code in the document without running it\ninclude: false - Hides all output but still runs code (good for setup chunks where you load packages!)\noutput: false - Doesn’t include the results of that code chunk in the output\ncache: true - Saves results of running that chunk so if it takes a while, you won’t have to re-run it each time you re-render the document\nfig.height: 5, fig.width: 5 - modify the dimensions of any plots that are generated in the chunk (units are in inches)\nfig.cap: \"Text\" - add a caption to your figure in the chunk\n\nTry adding or changing the chunk options for the chunk in my_first_Rmd.qmd and re-render your document to see what happens.\n\n```{r}\n#| eval: false\nsummary(swiss)\n```\n\n\n\nIn-Line R code\nSometimes we want to insert a value directly into our text. We do that using code in single backticks starting off with r.\nFour score and seven years ago is the same as `r 4*20 + 7` years.\nFour score and seven years ago is the same as 87 years.\nMaybe we’ve saved a variable in a code chunk that we want to reference in the text:\n\nx &lt;- sqrt(77)\n\nThe value of `x` rounded to the nearest two decimals is `r round(x, 2)`.\nThe value of x rounded to the nearest two decimals is 8.77.\nHaving R dump values directly into your document protects you from silly mistakes:\n\nNever wonder “how did I come up with this quantity?” ever again: Just look at your formula in your .qmd file!\nConsistency! No “find/replace” mishaps; reference a variable in-line throughout your document without manually updating if the calculation changes (e.g. reporting sample sizes).\nYou are more likely to make a typo in a “hard-coded” number than you are to write R code that somehow runs but gives you the wrong thing.",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#quarto-headers",
    "href": "Lectures/lec1_intro.html#quarto-headers",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Quarto Headers",
    "text": "Quarto Headers\nThe header of a .qmd file is a YAML4code block, and everything else is part of the main document. Try adding some of these other fields to your YAML and re-render it to see what it looks like.\n\n---\ntitle: \"Untitled\"\nauthor: \"Victoria Sass\"\ndate: \"March 26, 2024\"\noutput: html_document\n---\n\nTo mess with global formatting, you can modify the header. Be careful though, YAML is space-sensitive; spaces and indents matter!\n\noutput:\n  html_document:\n    theme: readable\n\nIn your YAML header, make the date come from R’s Sys.time() function by changing:\ndate: \"March 26, 2024\"\nto\ndate: \"`r Sys.time()`\"",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#quarto-text-markdown",
    "href": "Lectures/lec1_intro.html#quarto-text-markdown",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Quarto text (“markdown”)",
    "text": "Quarto text (“markdown”)\nFor details on text formatting (e.g. bold), outlines/bullet points, nicely formatted math and more, see the Quarto documentation.\n\nGetting started with Quarto\n\nTutorial: Hello, Quarto\nTutorial: Computations\nTutorial: Authoring\n\nWays to modify the overall document appearance\nWays to format parts of your document\nLearn about the visual editor here",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec1_intro.html#footnotes",
    "href": "Lectures/lec1_intro.html#footnotes",
    "title": "Lecture 1: Getting started with R, RStudio, and Quarto",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nComment and organize your code well!↩︎\nThis thing is the cursor: |↩︎\nThis thing is the cursor: |↩︎\nYou can read a bit more about YAML headers in Quarto here and this reference page lists all options possible for html output.↩︎",
    "crumbs": [
      "Lectures",
      "Lecture 1: Getting started"
    ]
  },
  {
    "objectID": "Lectures/lec5_data_viz.html",
    "href": "Lectures/lec5_data_viz.html",
    "title": "Lecture 5: Data visualization with tidyverse!",
    "section": "",
    "text": "ggplot gives you lots of flexibility in making beautiful plots! Illustration by Allison Horst.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Data visualization"
    ]
  },
  {
    "objectID": "Lectures/lec5_data_viz.html#getting-started-with-ggplot",
    "href": "Lectures/lec5_data_viz.html#getting-started-with-ggplot",
    "title": "Lecture 5: Data visualization with tidyverse!",
    "section": "Getting started with ggplot()",
    "text": "Getting started with ggplot()\nLet’s make a plot of population over time for the country of Japan.\nFirst, review: how do you get the subset of the gapminder dataset that consists of just the Japan data, and store it in R as an object called japan_data?\nCool, now let’s plot population versus time with ggplot():\n\nggplot(japan_data, aes(x = year, y = pop))\n\n\n\n\n\n\n\n\nWeird, what do you notice? ggplot() is funny in that the first line which actually has the ggplot function only declares the initial plot area; it doesn’t make the full plot. To do that, we add a + at the end of the ggplot() line and add additional lines of code. For example, “geoms” (geometry layers) add the actual lines, points, bars, etc.:\n\nggplot(japan_data, aes(x = year, y = pop)) +\n  geom_line()\n\n\n\n\n\n\n\n\nWe can combine multiple layers too as long as they make sense for the data structure:\n\nggplot(japan_data, aes(x = year, y = pop)) +\n  geom_line() +\n  geom_point()\n\n\n\n\n\n\n\n\nWe can make things a lot prettier and more customized too. Here are just a few examples of things we can do:\n\nggplot(japan_data, aes(x = year, y = pop/1e6)) +\n  geom_line(color = \"maroon\", alpha = 0.7) +\n  geom_point(color = \"maroon\", alpha = 0.7) +\n  xlab(\"Year\") + ylab(\"Population (millions of people)\") +\n  ggtitle(\"Japan's population over time\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYour turn\n\n\n\nStart with a simple ggplot plot of population versus life expectancy for the Japan data; by simple, I mean just do the bare minimum to make the plot without adding additional features. Then let’s add/change some things:\n\nRename the axis labels so that they look more polished.\nAdd a title to your plot.\nChange the theme.\nChange the color of the line.\nWhat does changing the value of alpha to 0.1 or 1 do?",
    "crumbs": [
      "Lectures",
      "Lecture 5: Data visualization"
    ]
  },
  {
    "objectID": "Lectures/lec5_data_viz.html#plotting-multiple-countries",
    "href": "Lectures/lec5_data_viz.html#plotting-multiple-countries",
    "title": "Lecture 5: Data visualization with tidyverse!",
    "section": "Plotting multiple countries",
    "text": "Plotting multiple countries\nWhat if we want to compare several countries on the same plot? We might try the following code, but it looks bonkers. Try it and see:\n\nmulti_country_data = filter(gapminder, country %in% c(\"Japan\", \"Nigeria\", \"Argentina\", \"New Zealand\"))\n\nggplot(multi_country_data, aes(x = year, y = pop)) +\n  geom_line()\n\n\n\n\n\n\n\n\nWhy does the plot look like that, and how can we fix it? As part of troubleshooting, we might check what a scatterplot looks like (without connecting the lines):\n\nggplot(multi_country_data, aes(x = year, y = pop)) +\n  geom_point()\n\n\n\n\n\n\n\n\nNotice that looks reasonable. So what do you think is the issue with the line plot?\n\n\n\n\n\n\nExpand this for a solution\n\n\n\n\n\nThe issue is that the multi_country_data dataset has both multiple countries and multiple years, and currently ggplot does not know to group the time series data by country when it is deciding how to connect the points with lines. It is treating it as data to plot as a single line, when we would like a separate line for each country.\nTo fix this, we will specify a grouping variable using the group argument to the aes() function:\n\nmulti_country_data = filter(gapminder, country %in% c(\"Japan\", \"Nigeria\", \"Argentina\", \"New Zealand\"))\n\nggplot(multi_country_data, aes(x = year, y = pop, group = country)) +\n  geom_line()\n\n\n\n\n\n\n\n\nWe probably also want to distinguish and label the lines somehow by what country they represent:\n\nmulti_country_data = filter(gapminder, country %in% c(\"Japan\", \"Nigeria\", \"Argentina\", \"New Zealand\"))\n\nggplot(multi_country_data, aes(x = year, y = pop, group = country, color = country)) +\n  geom_line()",
    "crumbs": [
      "Lectures",
      "Lecture 5: Data visualization"
    ]
  },
  {
    "objectID": "Lectures/lec5_data_viz.html#facets-subplots",
    "href": "Lectures/lec5_data_viz.html#facets-subplots",
    "title": "Lecture 5: Data visualization with tidyverse!",
    "section": "Facets (subplots)",
    "text": "Facets (subplots)\nWhat if we want to plot each country in a different subplot so that we can see each curve on its own scale? We can use facet_wrap():\n\nggplot(multi_country_data, aes(x = year, y = pop, group = country)) +\n  geom_line() +\n  facet_wrap(~ country, scales = \"free\")\n\n\n\n\n\n\n\n\nIn fact, we no longer need the group = country argument because we’re going to put each country in its own plot/panel anyway:\n\nggplot(multi_country_data, aes(x = year, y = pop)) +\n  geom_line() +\n  facet_wrap(~ country, scales = \"free\")\n\n\n\n\n\n\n\n\nNote that since they all share an x-axis (years), it might make sense to plot them vertically stacked so that the years line up. For this, we can use facet_grid() which allows us to arrange the plots specifically in a row or a column:\n\nggplot(multi_country_data, aes(x = year, y = pop, group = country)) +\n  geom_line() +\n  # make countries the rows\n  facet_grid(country ~ ., scales = \"free\")",
    "crumbs": [
      "Lectures",
      "Lecture 5: Data visualization"
    ]
  },
  {
    "objectID": "Lectures/lec5_data_viz.html#pivoting-for-plots",
    "href": "Lectures/lec5_data_viz.html#pivoting-for-plots",
    "title": "Lecture 5: Data visualization with tidyverse!",
    "section": "Pivoting for plots",
    "text": "Pivoting for plots\nWhat if we want to plot one country over time but we want to plot three different variables for it: lifeExp, pop, and gdpPercap? We’d basically like to group by variable, but to do that with ggplot, it has to be a column of the dataset. As in we need a column whose values are “lifeExp”, “pop”, and “gdpPercap” (or some other names for these three quantities) and another column whose value is the value of that variable.\nTo see this, start thinking how you would construct this plot. You might want the first line to look something like this (this is pseudocode):\n\n# ggplot(japan_data, aes(x = year, y = value of one of the variables, group = variable))\n\n# or if they're on separate panels/subplots:\n\n# ggplot(japan_data, aes(x = year, y = value of one of the variables)) + facet_wrap(...on variable)\n\nTo do this… yes, we will pivot the data longer!\n\njapan_wide = japan_data %&gt;%\n  pivot_longer(\n    cols = lifeExp:gdpPercap,\n    names_to = \"variable\",\n    values_to = \"value\"\n  )\n\nggplot(japan_wide, aes(x = year, y = value)) +\n  geom_line() +\n  facet_wrap(~ variable, scales = \"free\")\n\n\n\n\n\n\n\n\nAgain, we can use facet_grid() to stack the plots so they align by year:\n\nggplot(japan_wide, aes(x = year, y = value)) +\n  geom_line() +\n  facet_grid(variable ~ ., scales = \"free\")\n\n\n\n\n\n\n\n\nTo see what else you can do with ggplot, check out further documentation online such as the ggplot gallery and the ggplot vignettes or “articles”. Happy exploring!",
    "crumbs": [
      "Lectures",
      "Lecture 5: Data visualization"
    ]
  },
  {
    "objectID": "Lectures/lec5_data_viz.html#naming-code-chunks",
    "href": "Lectures/lec5_data_viz.html#naming-code-chunks",
    "title": "Lecture 5: Data visualization with tidyverse!",
    "section": "Naming code chunks",
    "text": "Naming code chunks\nIf I render the following Quarto document:\n\nI get the following error message:\n\nIf I take the same Quarto document and just name my code chunks like so:\n\nThen I get somewhat more helpful output about the progress before the error:\n\n\n\n\n\n\n\nYour turn\n\n\n\nMake a Quarto document that looks like the second one above, with the named chunks.\nThen identify and fix the error(s) to get it rendering successfully.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Data visualization"
    ]
  },
  {
    "objectID": "Lectures/lec5_data_viz.html#identifying-where-you-want-to-edit-the-code",
    "href": "Lectures/lec5_data_viz.html#identifying-where-you-want-to-edit-the-code",
    "title": "Lecture 5: Data visualization with tidyverse!",
    "section": "Identifying where you want to edit the code",
    "text": "Identifying where you want to edit the code\nOnce you identify what line is triggering the error message, then you can work on figuring out what caused the error. Remember: this is not necessarily the code you want to edit. The part of the code you modify to fix the issue could be in an earlier line of code or an earlier code chunk.\n\n\n\n\n\n\nYour turn\n\n\n\nIn fact let’s practice that right now! In the qmd file below,\n\nWhich line is generating the error message? (To which line is the error message referring?)\nWhere would you edit the code to fix the error?",
    "crumbs": [
      "Lectures",
      "Lecture 5: Data visualization"
    ]
  },
  {
    "objectID": "Lectures/lec5_data_viz.html#how-to-locate-an-error-when-youve-rendered-too-much-at-once",
    "href": "Lectures/lec5_data_viz.html#how-to-locate-an-error-when-youve-rendered-too-much-at-once",
    "title": "Lecture 5: Data visualization with tidyverse!",
    "section": "How to locate an error when you’ve rendered too much at once",
    "text": "How to locate an error when you’ve rendered too much at once\nRule number 1: render frequently! But of course sometimes you forget, or you have other reasons that you add a lot of code or make a lot of code before rendering. Let’s talk about how to troubleshoot in that case if you haven’t named your code chunks: sequentially cut out code and try rendering again.\n\nCut (as in cut and paste, not as in delete) everything after the first code chunk.\nTry to render the document again.\n\nIf it doesn’t render successfully, you know that at least the first issue is in the small document you just tried to render: the YAML header, some Markdown text/formatting, or the first code chunk.\nIf it renders without errors, then the issue must be happening somewhere in the part that you cut. Paste it back, and now repeat step 1 but cut everything after the second code chunk. And so on.",
    "crumbs": [
      "Lectures",
      "Lecture 5: Data visualization"
    ]
  },
  {
    "objectID": "Homework/CSSS508_HW1_Example.html",
    "href": "Homework/CSSS508_HW1_Example.html",
    "title": "CSSS508 Homework 1 Example",
    "section": "",
    "text": "I’m interested in exploring a dataset from base R called iris. From its documentation I see that it is data about 50 flowers from each of 3 species of iris and their respective measurements of sepal length, sepal width, petal length, and petal width.\nI first want to take a look at a preview of the dataset by making a nice table.\n\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\n1\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n2\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n3\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n6..145\n\n\n\n\n\n\n\n146\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n147\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n148\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n149\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n150\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\n\n\n\nThe mean petal length is 3.76 but its median petal length is 4.35. It’s range is 5.9 which additionally suggests a certain degree of spread.\nIt might be useful to look at the distribution to gain a better sense of the variation of this variable.\n\n\n\n\n\n\n\n\n\nThere seems to be a cluster of much smaller petals and then another cluster of average to bigger petals. I wonder how this varies by species…?\n\n\n\n\n\n\n\n\n\nWe can see from this plot that the overall mean and median of petal length is quite misleading! Only the verisicolor species of iris is close to those values while setosa is much mush smaller and virginica is a bit bigger.\nIs there a similar thing happening for sepal length and width? Let’s look at some basic descriptives of the dataset.\n\n\n\n\n\n\n\n\nSepal.Length\nSepal.Width\nPetal.Length\nPetal.Width\nSpecies\n\n\n\n\nMin. :4.300\nMin. :2.000\nMin. :1.000\nMin. :0.100\nsetosa :50\n\n\n1st Qu.:5.100\n1st Qu.:2.800\n1st Qu.:1.600\n1st Qu.:0.300\nversicolor:50\n\n\nMedian :5.800\nMedian :3.000\nMedian :4.350\nMedian :1.300\nvirginica :50\n\n\nMean :5.843\nMean :3.057\nMean :3.758\nMean :1.199\nNA\n\n\n3rd Qu.:6.400\n3rd Qu.:3.300\n3rd Qu.:5.100\n3rd Qu.:1.800\nNA\n\n\nMax. :7.900\nMax. :4.400\nMax. :6.900\nMax. :2.500\nNA\n\n\n\n\n\n\n\nIt’s interesting to note with the summary function that for numerical data it’ll calculate the classic 5 statistics used to construct a boxplot plus the mean but for a categorical variable like iris$Species it returns the frequency of each value of the variable.\nThe distribution of sepal length looks wider than sepal width, similar to how it was for those measurements of the petals. Let’s see how sepal length and width relate to one another graphically.\n\n\n\n\n\n\n\n\n\nThere are still clusters by each species type but for verisicolor and virginica there’s much more overlap. Overall, there’s tighter clustering by species for the petal length and width than there is for the sepal length and width."
  },
  {
    "objectID": "Homework/homework.html",
    "href": "Homework/homework.html",
    "title": "Overview",
    "section": "",
    "text": "This page contains general instructions for assignments and peer reviews. For homework-specific instructions and templates go to the specific assignment listed on the left.\nAll assignments should be created using Quarto and uploaded to Canvas as both html and qmd files. Your document should be pleasant for a peer to look at and follow all instructions. Use sections for organization, label figures/tables, and use code chunks.\nThis is a one-credit pass/fail course intended to help you learn R. The focus is on learning and practice, not on points. Assignments and peer reviews will be graded for completion, but the points are not the point: they are key opportunities to practice R/RStudio/Quarto and to learn from each other. Feel free to work together, discussion questions on Ed Discussion, trade ideas and tips.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#peer-review",
    "href": "Homework/homework.html#peer-review",
    "title": "Overview",
    "section": "Peer Review",
    "text": "Peer Review\nYou are required to examine and provide feedback on a peer’s homework submission each week. Reading and evaluating the work of others is useful and important! Good programmers realize that most problems have been solved by others; the trick is figuring out how to apply existing code to new problems. You will develop this skill by reading others’ code, seeing how other people approached the problems, providing suggestions, and pointing out when you learned something new. Please give constructive, polite, and insightful comments that encourage your classmate and help them learn from you.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#a-note-about-rendering-your-html-documents",
    "href": "Homework/homework.html#a-note-about-rendering-your-html-documents",
    "title": "Overview",
    "section": "A Note About Rendering Your HTML documents",
    "text": "A Note About Rendering Your HTML documents\nYou need to include embed-resources: true in your YAML header in order for your HTML documents to include any plot output when you upload them to Canvas. It should look something like the following:\n\nYou can read more about this option here but basically, whenever you render a .qmd file to HTML, all output created goes into a separate, associated folder, which is referenced when displaying the page in your web browser. However, when you upload the HTML file separately from that folder (e.g. to Canvas or through email), it doesn’t have the specific output images to reference, so they won’t appear. When you specify in your YAML header that you want to embed resources, you’re explicitly adding the output created by your code to the HTML file so that a separate output folder is longer created and you can send your HTML file with all its output as one entity.",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework.html#assignment-due-dates",
    "href": "Homework/homework.html#assignment-due-dates",
    "title": "Overview",
    "section": "Assignment Due Dates",
    "text": "Assignment Due Dates\n\n\n\n\n\n\n\n\n#\nHomework Due\nPeer Review Due\n\n\n\n\n1\n08 October\n13 October\n\n\n2\n15 October\n20 October\n\n\n3\n22 October\n27 October\n\n\n4\n29 October\n03 November\n\n\n5\n05 November\n10 November\n\n\n6\n12 November\n17 November\n\n\n7\n19 November\n24 November\n\n\n8\n26 November\n01 December\n\n\n9\n03 December\n08 December",
    "crumbs": [
      "Homework",
      "Overview"
    ]
  },
  {
    "objectID": "Homework/homework4.html",
    "href": "Homework/homework4.html",
    "title": "Homework 4",
    "section": "",
    "text": "Instructions\nHomework 4 has been posted on Canvas, and the instructions are posted there. Rather than reading instructions here for creating your own Quarto document, from the Canvas assignment you can download a Quarto file that has the homework instructions/problems and spaces for you to add/modify text and code. You’ll upload that qmd file and its rendered html file as your homework submission.\nHappy coding! I look forward to hearing how this homework goes for you.",
    "crumbs": [
      "Homework",
      "Homework 4"
    ]
  },
  {
    "objectID": "Homework/homework3.html",
    "href": "Homework/homework3.html",
    "title": "Homework 3",
    "section": "",
    "text": "Instructions\nCreate a new Quarto document (.qmd file) for this new homework; always use a new Quarto document for each homework.\nIn your Homework 3 Quarto document, continue to explore the gapminder dataset from the gapminder package, following the instructions below. Your document should be pleasant for a peer to look at, with some organization using section headings. Use chunk options to control which code and raw output you show in the html file when you render your Quarto document. When you’ve completed the assignment, upload to Canvas both the .qmd file and the .html file it generates when you render the .qmd file.\nDetailed instructions for HW3:\n\nOrganize your report in a few sections with appropriately named and Markdown-formatted section headings.\nUse an Introduction or Data section at the start of the report to summarize in sentences what the dataset is, where it comes from, what variables it includes and what they mean. Try to add one piece of information to what you wrote in your HW2.\nMake a table of some subset of rows and columns of the dataset (different from the one you made in HW2) two different ways, one using base R and one using tidyverse. In other words, you should have two chunks of code making the same table, and both chunks of code and both tables should show up in your rendered html file.\nThen use Markdown text (not just code comments) to summarize your approach to writing these two different chunks of code. Use code-style text formatting like this to make code references in your text look like code, just as in the lecture notes (e.g. when I write about mutate() and gapminder).\nCompute the number of Asian countries in the dataset two different ways, one using base R and one using tidyverse. Use chunk options to make sure your code for both approaches is displayed in your rendered html file, not hidden, and insert one of the two results (they should be the same as each other) into a text sentence using inline code.\nUsing either base R or tidyverse, compute the number of observations with at least 29 million people in 1952, and report your answer using inline code. Then pose a similar problem for the other student to try, and report the code and answer in your html file with a brief explanation of your solution!\nState one thing you didn’t do to your satisfaction in HW2 and how you have improved upon it in HW3. For instance, maybe you corrected some aspect of a table or of the Quarto html formatting in HW3 that wasn’t working in your HW2 submission.\nMost of all, have some fun practicing what we did in class and any other R/RStudio/Quarto features you might be discovering!",
    "crumbs": [
      "Homework",
      "Homework 3"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSSS 508: Intro to R for Social Scientists",
    "section": "",
    "text": "Jess Kunke (she/they)\n\n\n\nTuesdays 4:30-6:20pm\nThomson Hall, Room 125\n\n\n\nAs of Oct 28th:\n\nMon 4-5pm (Zoom and Padelford B-221)\nFri 2-3pm (Zoom only)\nSee Canvas for Zoom links\n\nFor further course details, please see the syllabus.\nThank you Vic Sass for the fantastic website design!"
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "CSSS 508: Intro to R for Social Scientists",
    "section": "",
    "text": "Jess Kunke (she/they)\n\n\n\nTuesdays 4:30-6:20pm\nThomson Hall, Room 125\n\n\n\nAs of Oct 28th:\n\nMon 4-5pm (Zoom and Padelford B-221)\nFri 2-3pm (Zoom only)\nSee Canvas for Zoom links\n\nFor further course details, please see the syllabus.\nThank you Vic Sass for the fantastic website design!"
  },
  {
    "objectID": "Homework/homework2.html",
    "href": "Homework/homework2.html",
    "title": "Homework 2",
    "section": "",
    "text": "Instructions\nCreate a new Quarto document (.qmd file) for this new homework; always use a new Quarto document for each homework.\nIn your Homework 2 Quarto document, explore the gapminder dataset from the gapminder package. Later in class we will also read this dataset in from a file, but for this homework we will access the dataset from a package. If you have not used this package before on your computer, you’ll need to install it first and then load it with library() as we saw in class. Otherwise, you can just use library(gapminder) to load the package and data(gapminder) to load the dataset.\nUse your Quarto document to report on a brief exploration of the dataset. This might read like the dataset section of a paper. It doesn’t have to be longer than a page or two, and it does not have to be up to the standard of what you would expect in a paper; the purpose is to practice R, RStudio, and Quarto to do things that eventually you would find practically useful. Remember, the homework is just meant to be a chance to practice stuff from class.\nDo at least the following:\n\nStart by doing some exploratory analysis of the dataset in the Console, some/much of which will not make it into your final document. In your Quarto document, only include code that you will use for the final document you submit. For example, don’t include commands like ?gapminder, and also don’t include code like str(gapminder) or mean(gapminder$year) unless you use them in tables, figures, and/or inline code.\nUse text to summarize what the dataset is, where it comes from, what variables it includes and what they mean.\nComment on the range or distribution of one of the dataset variables. You could show a histogram and report some summary statistics of the variable in the text of the document using inline R code (when we use r code to print values directly into the text of the document).\nInclude at least one plot of one variable versus another and comment briefly on what you notice in the plot.\nMake a table of some subset of rows and columns of the dataset and comment briefly on what you notice.\nComment your code using some comments (lines that start with #), even if the code doesn’t show up in the final html document. You don’t have to comment every line, but comment at least some lines that you think should be explained to someone who is trying to understand your code. For example, suppose you sent your Quarto document to a colleague because they wanted to reproduce your analysis and play with the dataset themselves. They might find it useful to see a comment that explains what kable() does and what kind of table you are trying to make there.\nMost of all, just have some fun exploring this dataset and practicing what we did in class!\n\nYour document should be pleasant for a peer to look at, with some organization using section headings. Some attempt should be made to label and format plots and tables. Use chunk options to limit the code and raw output you show in the html file when you render your Quarto document. Don’t include a figure or table without commenting on it in the text with at least a sentence. Round any numbers you report to a reasonable precision.\nUpload to Canvas both the .qmd file and the .html file it generates when you render.",
    "crumbs": [
      "Homework",
      "Homework 2"
    ]
  },
  {
    "objectID": "Homework/homework1.html",
    "href": "Homework/homework1.html",
    "title": "Homework 1",
    "section": "",
    "text": "Instructions\nWrite up a .qmd file showing some exploratory analyses of the Swiss fertility data. Upload both the .qmd file and the .html file to Canvas. You must upload BOTH for credit.\nMix inline R calculations, R output, and plots with text describing the relationships you see. Include at least two plots and at least one instance of inline R code (e.g. functions like nrow(), mean(), sd(), cor(), median(), min()). You are encouraged to include more! You may not hard-code any numbers referenced in your text.\nYour document should be pleasant for a peer to look at, with some organization using sections or lists, and all plots labeled clearly. Use chunk options echo and output to limit the code/output you show in the .html. Discussion of specific values should be summarized in sentences in your text—not as printed code and output—and rounded so as not to be absurdly precise (e.g. round x with round(x, 2)).\n\n\nTemplate\nrendered html file • raw qmd file\n\n\nExample\nrendered html file • raw qmd file",
    "crumbs": [
      "Homework",
      "Homework 1"
    ]
  },
  {
    "objectID": "Homework/homework5.html",
    "href": "Homework/homework5.html",
    "title": "Homework 5",
    "section": "",
    "text": "Homework 5 has been posted on Canvas, and just as with Homework 4, you can download a Quarto document from the Homework 5 Canvas assignment that has the homework instructions/problems and spaces for you to add/modify text and code. You’ll upload that qmd file and its rendered html file as your homework submission. I’ve also posted the instructions here, and if you prefer, you can create a new Quarto document from scratch and answer these problems in it instead of the one provided on the Homework 5 Canvas assignment. In that case, you will submit that qmd file and the html file you get when you render it.\n\nModify this document to complete your homework for Homework 5.\nPost questions on Ed Discussion, discuss with each other, and get as far as you can on these problems.\nIf by the time the homework is due you have worked on a problem but did’t fully complete it, feel free to leave your work so far and write about where you’re stuck or what is going wrong or what your question is, and your peer evaluator might have some input.\nFeel free to change the format of this document in ways that you think make the output look nicer or easier to read, but keep the general structure (sections, questions, etc) so that your peer reviewer knows which part is which.",
    "crumbs": [
      "Homework",
      "Homework 5"
    ]
  },
  {
    "objectID": "Homework/homework5.html#section-a-pivoting-with-the-gapminder-dataset",
    "href": "Homework/homework5.html#section-a-pivoting-with-the-gapminder-dataset",
    "title": "Homework 5",
    "section": "Section A: Pivoting with the gapminder dataset",
    "text": "Section A: Pivoting with the gapminder dataset\n\nWe saw in lecture how to pivot n_obs_by_year_cont wider:\n\n\nobs_by_year_cont_wider = n_obs_by_year_cont %&gt;%\n  pivot_wider(\n    # get the names for the new columns from the continent column\n    names_from = continent,\n    # get the values for the new columns from the n.obs column\n    values_from = n.obs\n  )\n\nWrite code to pivot obs_by_year_cont_wider longer and call the resulting table obs_by_year_cont_longer. You should find that obs_by_year_cont_longer is the same as n_obs_by_year_cont. Use kable() to display the two tables neatly in your rendered html file.\n\n# your code here\n\n\nFollowing the example from class using %in%, create a subset of the gapminder dataset that has just the data for Argentina, El Salvador, and Uruguay before 1990, and give this dataset an appropriate name. Then reformat the dataset so that each row is a country, each column is a year, and each cell of the table is the per-capita GDP. (If you would like a little extra challenge, make each cell of the table the total GDP by multiplying population and per-capita GDP.) Display the table in the rendered html file using kable().\n\n\n# your code here\n\n\nFor extra practice, work your way through some of the examples here for both pivoting longer and pivoting wider. These examples are designed to help you gradually learn about additional options you can set during pivoting and how to handle problems of varying complexity. I recommend trying the first couple examples in the pivoting longer section and the tidycensus example in the pivoting wider section. For each example you check out, I recommend first reading the section about it and the code that goes with it, then try it out yourself. For many of them you don’t have to install any new packages, but some like tidycensus will require that you install a package (such as tidycensus) first in order to access the dataset they use. Then explain (here, in text, below this problem and before Section B) one or two things you learned.",
    "crumbs": [
      "Homework",
      "Homework 5"
    ]
  },
  {
    "objectID": "Homework/homework5.html#section-b-plots",
    "href": "Homework/homework5.html#section-b-plots",
    "title": "Homework 5",
    "section": "Section B: Plots",
    "text": "Section B: Plots\nIn this section, the code chunks are not created for you. Create a new code chunk below each problem and before the next to put your code for that problem. If the problem asks you questions that you should answer in words instead of code, write your answers in text below the problem rather than as comments in the code.\n\nPlot per-capita GDP versus life expectancy for Colombia as a line, points, or both. Give the plot appropriate axis labels and a title. Try out a few themes and use a theme you like. Set the color and transparency of the line/points.\nPlot per-capita GDP over time for Argentina, El Salvador, and Uruguay before 1990. Make the plot three different ways: first plot all three countries on the same plot, then use facet_wrap() to plot each country in its own subplot, then use facet_grid(). Comment on which plot settings you need for each plot, if there are any that differ between the two plots. Also comment on what happens if you omit the facet_wrap argument scales = \"free\".\nCombine pivoting and facet_grid() to make a plot with 9 subplots in a 3x3 grid, where the columns are country (Japan, China, or South Korea), the rows are variables (life expectancy, population, or per-capita GDP), and the x-axis is time. Use scales = \"free_y\" as an argument to facet_grid(). Your plot should look something like this:\n\n\nTake your time with this. Break the problem down into steps. Identify at least one step you’ll have to do, and then work backwards or forwards from there: What do I need to do in order to be able to do that step? What will I do once I have that step?\nIf you have time, here are further extensions you can try with this plot:\n\nImprove the axis labels, theme, and/or other features.\nScale the variables so that the y-axis scales are nicer or more easily readable.\nWhat could you do to get the variables to be labeld in the plot as “Population”, “LifeExpectancy”, and “GDPperCapita”? (If you want, you can go further and try to make them “Population”, “Life Expectancy”, and “GDP per Capita” and even add units.)\nTry using scales = \"free\" in facet_grid. Does it do what you expect? Try replacing facet_grid(..., scales = \"free\") with ggh4x::facet_grid2(..., scales = \"free_y\", independent = \"y\"), i.e. use the facet_grid2() function from the ggh4x package, and see how you like it.",
    "crumbs": [
      "Homework",
      "Homework 5"
    ]
  },
  {
    "objectID": "Homework/CSSS508_HW1_Template.html",
    "href": "Homework/CSSS508_HW1_Template.html",
    "title": "Homework 1",
    "section": "",
    "text": "This basic R markdown file has some text, inline code, and code chunks!"
  },
  {
    "objectID": "Homework/CSSS508_HW1_Template.html#code-chunks",
    "href": "Homework/CSSS508_HW1_Template.html#code-chunks",
    "title": "Homework 1",
    "section": "Code Chunks",
    "text": "Code Chunks\n\nset.seed(1)\nnorm &lt;- rnorm(100)\nhist(x = norm, \n     xlab = \"X Axis Name\", \n     ylab = \"Count\", \n     main = \"Histogram of 100 observations from a Standard Normal\")\n\n\n\n\n\n\n\n\nUnless you include the chunk option #| echo: false, your code chunk will be displayed in your final document."
  },
  {
    "objectID": "Homework/CSSS508_HW1_Template.html#text-and-inline-text",
    "href": "Homework/CSSS508_HW1_Template.html#text-and-inline-text",
    "title": "Homework 1",
    "section": "Text and Inline Text",
    "text": "Text and Inline Text\nThe sample mean of the data plotted above (rounded to 3 decimal points) is 0.109 and the variance is 0.807.\nWhat’s the relationship between standard deviation and variance?\n\\[ \\text{Standard Deviation}(X) = \\sqrt{\\text{Variance}(X)} \\]\nThe standard deviation of the data plotted above is 0.898."
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "Welcome! I look forward to working with you this quarter.\nThis syllabus is subject to change. All changes will be announced in class and via Canvas announcements.\n\nOverview\nThis course is intended to give students a foundational understanding of programming in the statistical language R. This knowledge is intended to be broadly useful wherever you encounter data in your education and career.\nThis course has no prerequisites; we do not assume you have any prior programming experience with R or any other language. We will also cover almost no statistics, but this course should help prepare you for CSSS, STAT, or other departments’ methods courses so that you can focus on the methods they cover more than the coding itself. Additionally, the basic concepts you learn will be applicable to other programming languages and research in general, such as logic and algorithmic thinking.\n\n\nLearning objectives\nBy the end of the course, students will be able to…\n\nDevelop more confidence in their programming skills and their understanding of computation more broadly\nBe familiar with the RStudio application and the syntax of the R language\nOrganize and document coding projects for reproducibility and efficient workflow\nRead in data from a file and explore the data\nManipulate and reformat data for quality control, summary statistics, and other purposes\nCombine multiple data sets from different sources and of different types\nCreate beautiful, clear, and informative data visualizations\nCombine text, code, and output into reports using Quarto\nGain confidence troubleshooting, debugging, and learning how to do new things in R\n\n\n\nStructure\nThis course consists of a hands-on lecture and drop-in office hours, each once a week for two hours.\nIn person or remote? This course is intended to be primarily in person, but I recognize that life happens, so I will plan to hold lectures and office hours in a hybrid fashion in case you need to join remotely sometimes. This way we can also post lecture recordings in case you want to review something from class.\n\nLectures\nFor a schedule of lecture topics, please see the Lectures page. Note that the course will not meet during final exam week.\nPlease bring a laptop to class each week; I will spend a lot of class “live coding”, meaning I will move at a pace and in a sequence that is intended for you to code along with me and ask questions as they come up. I will also have some practice problems for you to work on during class. If you do not have a laptop you can bring to class and are not sure how to borrow one, please let me know in advance.\n\n\nOffice hours\nOffice hours are optional/drop-in and are a great space for asking questions, getting advice, or continuing discussions from class.\n\n\n\nResources\nThis course has no required text. I will guide you through content during lecture, and the lecture notes will all be here on this website. There are also many helpful resources available for free online if you would like further references along the way or after this class ends, and here is just a selection that you might find useful:\n\nR for Data Science by Hadley Wickham, Mine Çetinkaya-Rundel, & Garrett Grolemund.\n\n\n\nClass communication\n\nCourse content (lecture notes) and homework instructions will be posted here on this course website.\nYou will be submitting your assignments and peer reviews through Canvas.\nCheck your Canvas notification settings and make sure you get our course announcements! This is how I will send out homework clarifications, schedule changes, and other important information.\nPlease use Ed Discussion to post your questions to peers and provide some advice to others! I will also keep an eye on the discussions and step in as needed, but the primary goal is to encourage collaboration and discussion among members of the class.\nPlease also make good use of my office hours to address your questions and get extra practice with the material.\nWhen asking questions, please provide the code you ran and the error you gave, be specific and concrete, and try to provide a minimal reproducible example. This helps me and your fellow students give you the most helpful feedback!\n\n\n\nAnonymous feedback\nThroughout the course, I welcome your feedback through this short anonymous feedback survey on what’s working for you about the class environment or format, what’s not, and any suggestions or ideas you have.\n\n\nGrading\nThis course is graded as credit/no credit. To pass you need to receive at least 60% of the available points. There will be 9 graded homework assignments, assigned weekly for the first 9 weeks of instruction. There are 4 points possible for each week that features a homework.\n\nHomework (75%; 3 points): These must be turned in as rendered Markdown documents which we will learn to create and for which templates are provided. They will be graded for completion (3 points if submitted, 0 otherwise). These are designed first and foremost to develop skills rather than “prove” you have learned concepts. I encourage you to communicate and work together, so long as you write and explain your code yourself and do not copy work. You can learn a lot from replicating others’ code, but you will learn nothing if you copy it without knowing how it works! In other words, you’re not really going to learn unless you do the coding yourself!\nPeer Review (25%; 1 point): Each week an assignment is due, students will be randomly assigned to provide constructive feedback on another student’s submission. Reading others’ code is an important skill and you will write better code knowing others will see it. These reviews will be due 5 days after homework is due. Each peer review is worth 1 point and will be graded for completion.\nSchedule: We have a 2-hour interactive lecture/lab session on Tuesdays. Office Hours will be be held on Wednesdays. Homeworks will be due before class each Tuesday and peer reviews will be due 5 days later, by end-of-day on Sundays. Make sure to check the Homework page or Canvas for all due dates!\n\n\n\nClassroom Environment\nI’m committed to fostering a friendly and inclusive classroom environment in which all students have an equal opportunity to learn and succeed. This course is an attempt to make an often difficult and frustrating experience (learning R for the first time) less obfuscating, daunting, and stressful. That said, learning happens in different ways at at a different pace for everyone. Learning is also a collaborative and creative process and my aim is to create an environment in which you all feel comfortable asking questions of me and each other. Treat your peers and yourself with empathy and respect as you all approach this topic from a range of backgrounds and experiences (in programming and in life).\n\nNames & Pronouns: Everyone deserves to be addressed respectfully and correctly. You are welcome to send me your preferred name and correct gender pronouns at any time.\nGetting Help: If at any point during the quarter you find yourself struggling to keep up, please let me know! I am here to help. A great place to start this process is by chatting after class, coming to office hours, or sending me an email.\nDiversity: Diverse backgrounds, embodiments, and experiences are essential to the critical thinking endeavor at the heart of university education. Therefore, I expect you to follow the UW Student Conduct Code in your interactions with your colleagues and me in this course by respecting the many social and cultural differences among us, which may include, but are not limited to: age, cultural background, disability, ethnicity, family status, gender identity and presentation, body size/shape, citizenship and immigration status, national origin, race, religious and political beliefs, sex, sexual orientation, socioeconomic status, and veteran status.\nAccessibility & Accommodations: Your experience in this class is important to me. If you have already established accommodations with Disability Resources for Students (DRS), please communicate your approved accommodations to me at your earliest convenience so we can discuss your needs in this course. If you have not yet established services through DRS, but have a temporary health condition or permanent disability that requires accommodations (conditions include but not limited to; mental health, attention-related, learning, vision, hearing, physical or health impacts), you are welcome to contact DRS at 206-543-8924, uwdrs@uw.edu, or through their website. DRS offers resources and coordinates reasonable accommodations for students with disabilities and/or temporary health conditions. Reasonable accommodations are established through an interactive process between you, me (your instructor), and DRS. It is the policy and practice of the University of Washington to create inclusive and accessible learning environments consistent with federal and state law.\nAcademic Integrity: Academic integrity is essential to this course and to your learning. In this course, violations of the academic integrity policy include but are not limited to: copying from a peer, copying from an online resource, or using resources from a previous iteration of the course. That said, I hope you will collaborate with peers on assignments, and use Internet resources when questions arise to help solve issues. The key is that you ultimately submit your own work. Anything found in violation of this policy will be automatically given a score of 0 with no exceptions. If the situation merits, it will also be reported to the UW Student Conduct Office, at which point it is out of my hands. If you have any questions about this policy, please do not hesitate to reach out and ask.\nReligious Accommodations: Washington state law requires that UW develop a policy for accommodation of student absences or significant hardship due to reasons of faith or conscience, or for organized religious activities. The UW’s policy, including more information about how to request an accommodation, is available at Religious Accommodations Policy. Accommodations must be requested within the first two weeks of this course using the Religious Accommodations Request form."
  },
  {
    "objectID": "Lectures/lec2_data_manip.html",
    "href": "Lectures/lec2_data_manip.html",
    "title": "Lecture 2: Manipulating and summarizing data",
    "section": "",
    "text": "(a) The experience I think some people had this week\n\n\n\n\n\n\n\n\n\n\n\n(b) The experience I want to help people have\n\n\n\n\n\n\n\nFigure 1: Two very different experiences with coding. (Illustration credit: Allison Horst)\nThere’s a certain amount of confusion and struggle that is a natural part of learning new skills and concepts, and that’s a great albeit uncomfortable thing. I didn’t mean to introduce additional barriers, though, and I’m sorry.\nLet’s get from Figure 1 (a) to Figure 1 (b) together today!",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data manipulation with base R"
    ]
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#different-working-modes",
    "href": "Lectures/lec2_data_manip.html#different-working-modes",
    "title": "Lecture 2: Manipulating and summarizing data",
    "section": "Different working modes",
    "text": "Different working modes\nWe saw two different ways to write and organize R code last time: in the Console and in a Quarto document. A third mode is to make an R script, and we can demo that briefly here. What’s the difference, and when might you use one mode or another?\n\nConsole\n\nInteractive\nGreat for exploratory analysis\nGreat for trying out different commands and developing your code\nNot really meant for recording your steps for later\nNot meant for sharing with other people\nOrder matters: for example, you have to define a variable (height = 60) before you use it (height + 4) or modify it (height = height + 4)\n\nBut if you mix up the order, you get an error, and you can type new code to fix it\n\n\nR script (.R file type)\n\nGreat for organizing a final analysis or set of code\nOrder matters: runs from start to finish\nMake notes for yourself/readers in the comments\n\nQuarto document (.qmd file type)\n\nIncorporate text, code, tables, plots, etc. together in one document\nGreat for making a report, website, etc.\nOrder matters: runs from start to finish\n\n\nNote: when you render a Quarto document, it actually creates an html file on your computer in the same directory as your qmd file and with the same name. For example, if you render myHW1.qmd it will create myHW1.html in the same folder. It might be an unfamiliar file type, but it’s a file just like a pdf or a Word document or an R script. It is this html file which it opens for you in your browser or in RStudio, and after you render it you can always open that file at any time by double-clicking the html file with the same name as your qmd file. So when it comes time to submit your qmd and html files, you’ll want to submit the html file that’s already on your computer and in the same folder as the qmd file.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data manipulation with base R"
    ]
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#working-environments",
    "href": "Lectures/lec2_data_manip.html#working-environments",
    "title": "Lecture 2: Manipulating and summarizing data",
    "section": "Working environments",
    "text": "Working environments\nWhen you run height = 4 or read in data using the Console, you see these objects appear in the Environment tab. The reason it’s called the Environment tab is that it shows you what is in your current global environment. You can think of this like your work desk in R Studio. It’s the stuff you have defined already, that you can work with. If you run the code x + 4 in the console but you haven’t yet defined an object called x, you’ll get an error because that object is not defined in your global environment.\nWhen you open a script or a Quarto document and put code there, it doesn’t get run until you run it. So just because you have defined an object in your script or Quarto document does not mean it has actually been created anywhere yet. Similarly, the order in which you run your code matters.\nWhen you render a Quarto document, it actually creates a fresh environment behind the scenes and runs the code in the document start to finish. So if you defined some object height in your global environment (you see it in your Environment tab) but you never defined it in your Quarto document, and the code in your Quarto document tries to use it (like smaller_height = height - 4), you’ll get an error like “object height does not exist”.\nAll of this is important when it comes to troubleshooting errors yourself and when you ask for help in troubleshooting them.\nAlso, there are a few commands we learned that are useful when you work interactively in the Console but won’t work if you try to put them in a Quarto file and render it. The View() command and the ? command are both commands intended for use in the console only because they produce changes in the interactive RStudio window that can’t be reproduced in an html file when you try to render the Quarto file. Basically, commands that just print stuff or make plots/tables are fine, but commands that pull up viewing windows, help pages, etc probably won’t work. So if you get an error when you try to render the qmd file, and you have View and ? commands such as the following in your Quarto file, remove them and try rendering again:\n\nView(swiss)\n?swiss\n?mean",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data manipulation with base R"
    ]
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#workflow-tips-and-time-savers",
    "href": "Lectures/lec2_data_manip.html#workflow-tips-and-time-savers",
    "title": "Lecture 2: Manipulating and summarizing data",
    "section": "Workflow tips and time savers",
    "text": "Workflow tips and time savers\nFor your homework as well as for coding in general, here are some key tips to make your life easier:\n\nRender your Quarto document frequently\n\nIf an error occurs, you know it was something you just changed and not anywhere in the whole document\nMakes errors more interpretable and easier to troubleshoot\n\nExplore and develop your code in the Console, and as you work out parts of your code that you want to include in the final document, put them in your Quarto document or R script (for homework, we’re using Quarto documents) in the order that it needs to be run\nUse RStudio’s autocomplete to help you type less and avoid typos\n\nIf you type the first 3-4 characters of the name of a dataset or a function in R, a little menu will appear and allow you to autocomplete the rest of the name\nIf it’s a function name you’re typing, it will give you a quick summary of the function’s purpose and format\nAs we will see today, if it’s a dataset, once you enter the name and type $ it will list all the variables of the dataset and you can autocomplete the name of the variable you want\n\nIf you already typed some code and you want to type similar code, copy and paste, then modify\nUse and practice keyboard shortcuts\n\nShift-Command-C (or Shift-Control-C on a PC) to comment/uncomment a line\nCommand-Return (or Control-Return on a PC) to run a line of code or a highlighted chunk of code\nOption-Command-I to insert a code chunk in a Quarto document",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data manipulation with base R"
    ]
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#commenting-your-code",
    "href": "Lectures/lec2_data_manip.html#commenting-your-code",
    "title": "Lecture 2: Manipulating and summarizing data",
    "section": "Commenting your code",
    "text": "Commenting your code\nMany languages have a comment character that allows you to “comment out” parts of your code so that R will not run them. In R, that comment character is the hashtag #.\nWhy would I ever want to do that? One big reason: you can (and should! please!) use this to write comments to yourself and others who read your code, to explain what you’re doing or why. You can see examples of this above; for example, with the logical vectors, I used comments to tell you what each line of code did.\nThe second big reason: you can use this to temporarily not run certain lines, like if you’re troubleshooting code and you want to run the whole script start to finish but you want to skip some parts without deleting them. Let’s test this out. What value does x have after this code chunk? Why?\n\nx = 9\nx = x + 2\nx = x - 5\n\nWhat about after this code chunk, which is the same except the middle line is commented out? Why?\nRemember that to toggle back and forth between making the line commented and uncommented, you can use the keyboard shortcuts shift-control-C or shift-command-C.\n\nx = 9\n# x = x + 2\nx = x - 5",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data manipulation with base R"
    ]
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#extracting-multiple-rowscolumns",
    "href": "Lectures/lec2_data_manip.html#extracting-multiple-rowscolumns",
    "title": "Lecture 2: Manipulating and summarizing data",
    "section": "Extracting multiple rows/columns",
    "text": "Extracting multiple rows/columns\nYou can also extract multiple rows and/or columns by specifying a vector of row/column indices or names instead of just a single one:\n\n# some different types of vectors:\n16:20\nc(2, 4, 5)\nc(\"Conthey\", \"Herens\", \"Sion\", \"Boudry\")\nswiss$Education\n\n# using vectors to extract more complex subsets of the data\nswiss[16:20, 2:3]\nswiss[c(\"Conthey\", \"Herens\", \"Sion\", \"Boudry\"), 2:4]\nswiss$Education[2:4]\n\nA very useful kind of vector for indexing and subsetting is a logical-valued vector, meaning its elements are all either true or false.\n\nswiss$Education\nswiss$Education &gt; 20\nswiss$Education == 53\nswiss$Education != 53\n!(swiss$Education == 53)\n\nNow let’s use these logical vectors to do even more powerful subsetting:\n\n# get the values of Education that are greater than 20\nswiss$Education[swiss$Education &gt; 20]\n# get the values of Fertility for provinces in which Education is greater than 20\nswiss$Fertility[swiss$Education &gt; 20]\n# get the indices of the Education column for which the value is greater than 20\nwhich(swiss$Education &gt; 20)",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data manipulation with base R"
    ]
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#other-uses-of-logical-variables",
    "href": "Lectures/lec2_data_manip.html#other-uses-of-logical-variables",
    "title": "Lecture 2: Manipulating and summarizing data",
    "section": "Other uses of logical variables",
    "text": "Other uses of logical variables\nHow many of the provinces have Agriculture lower than 35%? 5%? 1%?\n\nsum(swiss$Agriculture &lt; 35)\nsum(swiss$Agriculture &lt; 5)\nsum(swiss$Agriculture &lt; 1)\n\nWhat percentage of provinces have Agriculture lower than 35%?\n\nmean(swiss$Agriculture &lt; 35)\n\n\n\n\n\n\n\nYour Turn\n\n\n\n\nWrite three different lines of code that will extract the Fertility variable of the swiss dataset.\nWhat does each of these lines do? Which of these lines work and which don’t? Which ones don’t work the way you expect? Why do you think that is?\n\n\nswiss[2,4]\nswiss[Courtelary,]\nswiss[\"Courtelary\"]\nswiss$Fertility[1,4]\nswiss$Fertility[1]\n\n\nUsing kable, make a table of just the Agriculture and Catholic variables of the swiss dataset.\nModify your answer to part 3 by showing just rows 5 through 10 in the table.",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data manipulation with base R"
    ]
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#file-paths",
    "href": "Lectures/lec2_data_manip.html#file-paths",
    "title": "Lecture 2: Manipulating and summarizing data",
    "section": "File paths",
    "text": "File paths\nA file path is the path to a folder (directory) or file on your computer. File paths are specified in reference to a root directory or a home directory. So for example, on my computer, the file path “~/Documents/CSSS-math-camp-2024/gapminder.csv” means that in my home directory (signified by “~”), there should be a “Documents” folder, and in there should be a “CSSS-math-camp-2024” folder, and in there should be a file called “gapminder.csv”. This path may or may not exist; it’s an address, and a file may or may not actually live there, and one of those folders might not actually be in the folder it’s supposed to be in, etc.\nFile paths can be absolute or relative. An absolute file path is defined with reference to the root directory. For example, “/Users/jessicakunke/Documents/CSSS-math-camp-2024/gapminder.csv” is an absolute file path. On a Windows machine, the root directory is usually “C:\\”, and the slashes in the path are all backward slashes “\\” instead of forward slashes “/”. On Mac and Linux machines, the root directory is usually “/”.\n\n\n\n\n\n\nAn important note for Windows users\n\n\n\n\n\ntl;dr: use a double backslash instead of a single backslash throughout your Windows file paths.\nThe deets:\nUnfortunately, R and other languages use backslashes as an “escape character”. What does that mean? Consider how character values have to be surrounded by double quotes to indicate it’s a character value instead of a variable/object/function name. Then what do you do if your character string includes double quotes? You “escape” the quotes with a backslash:\n\n# these two lines won't work if you uncomment them\n# print(\"He said \"whooooaaa\"\")\n# cat(\"He said \"whooooaaa\"\")\n\n# but these work; note the different output of print and cat\nprint('He said \\\"whooooaaa\\\"')\ncat('He said \\\"whooooaaa\\\"')\n\nAs a result, if you want to include a backslash as a character, you need to escape it with another backslash:\n\n# these two lines won't work if you uncomment them\n#   specifically, they expect you to type more (they think the commands aren't \n#   complete) because the \\\" is interpreted as part of the character string and\n#   it's expecting another \" to end the character string\n# print(\"C:\\User\\Desktop\\\")\n# cat(\"C:\\User\\Desktop\\\")\n\n# but these work\nprint(\"C:\\\\User\\\\Desktop\\\\\")\ncat(\"C:\\\\User\\\\Desktop\\\\\")\n\n\n\n\nA relative file path is defined with reference to an arbitrary location. For example, “data/gapminder.csv” means, look in your current directory for a folder called “data”, and in there, look for a file called “gapminder.csv”.\nReading in the data with gapminder &lt;- read_csv(\"gapminder.csv\") will work if RStudio knows to look in the directory that contains our dataset. You can use the command getwd() (for “get working directory”) to see the folder where RStudio is currently looking for your files; this location or folder is called your current working directory. Any relative file paths you use are relative to this folder. So when you say the file you want is “gapminder.csv”, you’re looking for that file in this folder.\nYou can organize your R projects using absolute paths, but this is not what I recommend if you are sharing your code or collaborating with others. Instead, see the next section on R projects!\n\n\n\n\n\n\nExpand for tips on using absolute file paths\n\n\n\n\n\n\nCheck out setwd() and getwd()\nIn the RStudio Files pane, navigate to the data set you want, click the gear, select “Copy folder path to clipboard”, then paste that file path wherever you want the file path (e.g. inside read_csv()).",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data manipulation with base R"
    ]
  },
  {
    "objectID": "Lectures/lec2_data_manip.html#organizing-your-work-with-r-projects",
    "href": "Lectures/lec2_data_manip.html#organizing-your-work-with-r-projects",
    "title": "Lecture 2: Manipulating and summarizing data",
    "section": "Organizing your work with R projects",
    "text": "Organizing your work with R projects\nA fairly painless and straightforward way to handle these file path challenges is to create an R Project. This R project will be associated with a folder where you put most or all of the code and data needed for the project. When you open the project in RStudio, it will tell RStudio to use that folder as “home base”. Then you specify all your file paths relative to that folder.\nLet’s try this approach. Create an R Project (File &gt; New Project) and select either New Directory or Existing Directory.\nOnce your new project opens, let’s see where the current working directory is (it should be the folder that you made the project in):\n\n# get working directory (getwd)\ngetwd()\n\nMake sure that gapminder.csv is in this directory, then try loading the file again as before:\n\ngapminder &lt;- read_csv(\"gapminder.csv\")\n\nTa-da!\nNotice this command is kind of noisy, printing out a bunch of stuff we don’t need. As the message says, we can make it “quieter” by setting another argument of the read_csv() function:\n\ngapminder &lt;- read_csv(\"gapminder.csv\", show_col_types = FALSE)",
    "crumbs": [
      "Lectures",
      "Lecture 2: Data manipulation with base R"
    ]
  },
  {
    "objectID": "Lectures/lec4_debugging_review.html",
    "href": "Lectures/lec4_debugging_review.html",
    "title": "Lecture 4: Debugging and review",
    "section": "",
    "text": "Homework and peer reviews (including for HW2) will be graded for completion\n\nThis is a one-credit course and I want the focus to be on practice, not points\n\nReminder: this week’s office hour is in Thomson, not Padelford (see website for details)\n\nDoes the office hour time work for people?",
    "crumbs": [
      "Lectures",
      "Lecture 4: Debugging and review"
    ]
  },
  {
    "objectID": "Lectures/lec4_debugging_review.html#code-chunk-options",
    "href": "Lectures/lec4_debugging_review.html#code-chunk-options",
    "title": "Lecture 4: Debugging and review",
    "section": "Code chunk options",
    "text": "Code chunk options\nThere are several code chunk options, including echo, include, and eval. You can review them in the Quarto documentation here.\n\nWhich chunk option do we use…\n\nto show/hide the code in the rendered html document?\nto run/not run the code?\nto run the code but not show any output or messages from it?\n\nWhich chunk option(s) should we use when we load packages at the beginning of the Quarto document?\nWhich chunk option(s) should we use if we want to show the code we used to make a graph, but we don’t want to actually run it (we might do this in a tutorial, like to show how to install a package)?",
    "crumbs": [
      "Lectures",
      "Lecture 4: Debugging and review"
    ]
  },
  {
    "objectID": "Lectures/lec4_debugging_review.html#formatting-text-to-look-like-code",
    "href": "Lectures/lec4_debugging_review.html#formatting-text-to-look-like-code",
    "title": "Lecture 4: Debugging and review",
    "section": "Formatting text to look like code",
    "text": "Formatting text to look like code\nTo do this, surround the text with backticks (`): `mutate()` will become mutate().",
    "crumbs": [
      "Lectures",
      "Lecture 4: Debugging and review"
    ]
  },
  {
    "objectID": "Lectures/lec4_debugging_review.html#how-to-read-a-quarto-rendering-error-message",
    "href": "Lectures/lec4_debugging_review.html#how-to-read-a-quarto-rendering-error-message",
    "title": "Lecture 4: Debugging and review",
    "section": "How to read a Quarto rendering error message",
    "text": "How to read a Quarto rendering error message\nWhen you try to render a Quarto document and it fails, you get an error message something like this:\n\nLet’s break this down.\n\nThe thing with the arrow ==&gt; at the top is the command that RStudio runs when you click the Render button.\nThen it says it’s processing your file, and it shows some of the progress it made through rendering\n\nThe “unnamed-chunk-2” refers to a code chunk in your code\nIt says unnamed because we didn’t name the chunk (we hadn’t talked about how to do that anyway). If you had named it, the name would appear there instead of “unnamed-chunk-2”.\n\nThe actual error message starts with “Quitting from ….”\n\nThe part that tells you something about what’s happening is the error message itself: object 'true' not found. This suggests that somewhere you typed a “true” where it doesn’t know what to do with it.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Debugging and review"
    ]
  },
  {
    "objectID": "Lectures/lec4_debugging_review.html#naming-chunks",
    "href": "Lectures/lec4_debugging_review.html#naming-chunks",
    "title": "Lecture 4: Debugging and review",
    "section": "Naming chunks",
    "text": "Naming chunks\nIf I render the following Quarto document:\n\nI get the following error message:\n\nIf I take the same Quarto document and just name my code chunks like so:\n\nThen I get somewhat more helpful output about the progress before the error:\n\n\n\n\n\n\n\nYour turn\n\n\n\nMake a Quarto document that looks like the second one above, with the named chunks.\nThen identify and fix the error(s) to get it rendering successfully.",
    "crumbs": [
      "Lectures",
      "Lecture 4: Debugging and review"
    ]
  },
  {
    "objectID": "Lectures/lec4_debugging_review.html#render-frequently",
    "href": "Lectures/lec4_debugging_review.html#render-frequently",
    "title": "Lecture 4: Debugging and review",
    "section": "Render frequently!",
    "text": "Render frequently!\nRule number 1: render frequently! But of course sometimes you forget, or you have other reasons that you add a lot of code or make a lot of code before rendering. Let’s talk about how to troubleshoot in that case: sequentially cut out code and try rendering again.\n\nCut (as in cut and paste, not as in delete) everything after the first code chunk.\nTry to render the document again.\n\nIf it doesn’t render successfully, you know that at least the first issue is in the small document you just tried to render: the YAML header, some Markdown text/formatting, or the first code chunk.\nIf it renders without errors, then the issue must be happening somewhere in the part that you cut. Paste it back, and now repeat step 1 but cut everything after the second code chunk. And so on.\n\n\nOnce you identify what line is triggering the error message, then you can work on figuring out what caused the error. Remember: this is not necessarily the code you want to edit. The part of the code you modify to fix the issue could be in an earlier line of code or an earlier code chunk.\n\n\n\n\n\n\nYour turn\n\n\n\nIn fact let’s practice that right now! In the qmd file below,\n\nWhich line is generating the error message? (To which line is the error message referring?)\nWhere would you edit the code to fix the error?",
    "crumbs": [
      "Lectures",
      "Lecture 4: Debugging and review"
    ]
  },
  {
    "objectID": "Lectures/lectures.html",
    "href": "Lectures/lectures.html",
    "title": "Lecture schedule",
    "section": "",
    "text": "Please note that this schedule is subject to change.\n\n\n\nLecture\nDate\nTopic\n\n\n\n\n1\n01 Oct 2024\nIntroduction to R, R Studio, and Quarto\n\n\n2\n08 Oct 2024\nData Manipulation with base R\n\n\n3\n15 Oct 2024\nData Manipulation with tidyverse\n\n\n4\n22 Oct 2024\nDebugging and review\n\n\n5\n29 Oct 2024\nIntro to data viz with tidyverse\n\n\n6\n05 Nov 2024\nBetter plots and tables\n\n\n7\n12 Nov 2024\nImporting, Exporting, and Cleaning Data\n\n\n8\n19 Nov 2024\nWorking with text data/objects in R\n\n\n9\n26 Nov 2024\nRegression in R\n\n\n10\n03 Dec 2024\nIteration, writing functions, and beyond",
    "crumbs": [
      "Lectures",
      "Lecture schedule"
    ]
  }
]